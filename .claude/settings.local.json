{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "Bash(python test:*)",
      "Bash(find:*)",
      "Bash(python -c \"\nimport sys\nsys.path.insert(0, ''/Users/shan/work/uploads/AutoReportAI/mcp-server'')\nfrom main import mcp\nprint(''已注册的MCP工具:'')\ntools = mcp.list_tools()\nprint(f''工具总数: {len(tools)}'')\nfor i, tool in enumerate(tools[:10]):\n    print(f''  {i+1}. {tool[\"\"name\"\"]} - {tool.get(\"\"description\"\", \"\"无描述\"\")}'')\nif len(tools) > 10:\n    print(f''  ... 还有 {len(tools) - 10} 个工具'')\n\")",
      "Bash(curl -X GET \"http://localhost:8000/api/v1/data-sources\" -H \"Authorization: Bearer $(cat /tmp/token.txt)\" -v)",
      "Bash(curl -X GET \"http://localhost:8000/api/v1/data-sources/\" -v)",
      "Bash(curl -X POST \"http://localhost:8000/api/v1/auth/login\" -H \"Content-Type: application/x-www-form-urlencoded\" -d \"username=admin&password=password\")",
      "Bash(curl -X GET \"http://localhost:8000/api/v1/data-sources/\" -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NTM3NzcyNzQsInN1YiI6ImYxMDBkODM3LWMxMDAtNDA1Ny05ZDNiLWJlYzA3YTM1ZDc1NSJ9.xIBonDh0DnyEgRaO3YYuGCOR9IajvcqmdGEG9jmSxyg\")",
      "Bash(curl -X POST \"http://localhost:8000/api/v1/data-sources/\" -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NTM3NzcyNzQsInN1YiI6ImYxMDBkODM3LWMxMDAtNDA1Ny05ZDNiLWJlYzA3YTM1ZDc1NSJ9.xIBonDh0DnyEgRaO3YYuGCOR9IajvcqmdGEG9jmSxyg\" -H \"Content-Type: application/json\" -d '{\n  \"\"name\"\": \"\"MyDorisDataSource\"\",\n  \"\"source_type\"\": \"\"doris\"\",\n  \"\"doris_fe_hosts\"\": [\"\"192.168.61.30\"\"],\n  \"\"doris_username\"\": \"\"root\"\",\n  \"\"doris_database\"\": \"\"doris\"\",\n  \"\"is_active\"\": true\n}')",
      "Bash(alembic current)",
      "Bash(python -c \"import psycopg2; print(''psycopg2 is available'')\")",
      "Bash(python -c \"\nimport psycopg2\nfrom app.core.config import settings\nprint(''Database URL:'', settings.DATABASE_URL)\n\")",
      "Bash(python -c \"\nimport psycopg2\nfrom app.core.config import settings\nimport os\n\n# Parse the database URL\ndb_url = settings.DATABASE_URL\n# Extract connection parameters\nparts = db_url.split(''://'')[1].split(''@'')\nuser_pass, host_port_db = parts[0], parts[1]\nuser, password = user_pass.split('':'')\nhost_port, db_name = host_port_db.split(''/'')[0].split('':''), host_port_db.split(''/'')[1]\nhost, port = host_port[0], host_port[1] if len(host_port) > 1 else ''5432''\n\ntry:\n    conn = psycopg2.connect(\n        host=host,\n        port=port,\n        database=db_name,\n        user=user,\n        password=password\n    )\n    cur = conn.cursor()\n    \n    # Check current enum values\n    cur.execute(\"\"SELECT enumlabel FROM pg_enum WHERE enumtypid = (SELECT oid FROM pg_type WHERE typname = ''datasourcetype'');\"\")\n    results = cur.fetchall()\n    print(''Current datasource type enum values:'')\n    for row in results:\n        print(f''  - {row[0]}'')\n    \n    cur.close()\n    conn.close()\nexcept Exception as e:\n    print(f''Error connecting to database: {e}'')\n\")",
      "Bash(ls -la)",
      "Bash(ls -la migrations/versions/)",
      "Bash(python scripts/init_db.py)",
      "Bash(docker-compose logs db)",
      "Bash(docker-compose down)",
      "Bash(docker-compose up -d db redis)",
      "Bash(docker-compose exec db psql -U postgres -c \"CREATE DATABASE autoreport;\")",
      "Bash(ls -la backend/)",
      "Bash(cat backend/requirements/base.txt)",
      "Bash(cat backend/app/core/config.py)",
      "Bash(docker-compose exec db psql -U postgres -d autoreport -c \"SELECT t.typname, e.enumlabel FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid WHERE t.typname = ''datasourcetype'' ORDER BY e.enumsortorder;\")",
      "Bash(docker-compose logs backend)",
      "Bash(source venv/bin/activate)",
      "Bash(true)",
      "Bash(python -m uvicorn app.main:app --host 0.0.0.0 --port 8000)",
      "Bash(curl -X 'GET' )",
      "Bash('http://localhost:8000/api/v1/data-sources/' )",
      "Bash(-H 'accept: application/json')",
      "Bash(curl -X POST \"http://localhost:8000/api/v1/data-sources/\" )",
      "Bash(-H \"Content-Type: application/json\" )",
      "Bash(-H \"Authorization: Bearer YOUR_AUTH_TOKEN\" )",
      "Bash(-d '{\n  \"\"name\"\": \"\"MyDorisDB\"\",\n  \"\"source_type\"\": \"\"doris\"\",\n  \"\"doris_fe_hosts\"\": [\"\"192.168.61.30\"\"],\n  \"\"doris_query_port\"\": 9030,\n  \"\"doris_database\"\": \"\"default\"\",\n  \"\"doris_username\"\": \"\"root\"\",\n  \"\"doris_password\"\": \"\"yjg@123456\"\"\n}')",
      "Bash(curl -X POST \"http://localhost:8000/api/v1/auth/login\" )",
      "Bash(-H \"Content-Type: application/json\" )",
      "Bash(-d '{\n  \"\"username\"\": \"\"admin\"\",\n  \"\"password\"\": \"\"password\"\"\n}')",
      "Bash(curl -X POST \"http://localhost:8000/api/v1/auth/login\" )",
      "Bash(-H \"Content-Type: application/x-www-form-urlencoded\" )",
      "Bash(-d \"username=admin&password=password\")",
      "Bash(PYTHONPATH=. python app/initial_data.py)",
      "Bash(curl -X POST \"http://localhost:8000/api/v1/auth/register\" )",
      "Bash(-H \"Content-Type: application/json\" )",
      "Bash(-d '{\n  \"\"username\"\": \"\"admin\"\",\n  \"\"email\"\": \"\"admin@example.com\"\",\n  \"\"password\"\": \"\"password\"\"\n}')",
      "Bash(curl -X POST \"http://localhost:8000/api/v1/auth/login\" )",
      "Bash(-H \"Content-Type: application/x-www-form-urlencoded\" )",
      "Bash(curl -X POST \"http://localhost:8000/api/v1/auth/login\" )",
      "Bash(-H \"Content-Type: application/x-www-form-urlencoded\" )",
      "Bash(-d \"username=newadmin&password=newpassword\")",
      "Bash(ls:*)",
      "Bash(chmod:*)",
      "Bash(python3:*)",
      "Bash(pip install:*)",
      "Bash(docker:*)",
      "Bash(docker-compose:*)",
      "Bash(mkdir:*)",
      "Bash(curl:*)",
      "Bash(export:*)",
      "Bash(env)",
      "Bash(rm /Users/shan/work/uploads/AutoReportAI/test_ai_simple.py)",
      "Bash(sudo kill -9 14215)",
      "Bash(source:*)",
      "Bash(PYTHONPATH=. python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload)",
      "Bash(rm:*)",
      "Bash(python:*)",
      "Bash(touch:*)",
      "Bash(grep:*)"
    ],
    "deny": []
  }
}