name: Quality Gate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write
  statuses: write
  checks: write

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Backend code quality checks
  backend-quality:
    name: Backend Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: |
          backend/requirements/base.txt
          backend/requirements/development.txt
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-quality-${{ hashFiles('backend/requirements/*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-quality-
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements/development.txt
    
    - name: Lint with flake8
      run: |
        cd backend
        echo "Running flake8 linting..."
        flake8 . --count --statistics --format=github
    
    - name: Check code formatting with black
      run: |
        cd backend
        echo "Checking code formatting with black..."
        black --check --diff --color .
    
    - name: Check import sorting with isort
      run: |
        cd backend
        echo "Checking import sorting with isort..."
        isort --check-only --diff --color .
    
    - name: Type checking with mypy
      run: |
        cd backend
        echo "Running type checking with mypy..."
        mypy app/ --show-error-codes --pretty
    
    - name: Security scanning with bandit
      run: |
        cd backend
        echo "Running security scan with bandit..."
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -f txt
    
    - name: Upload bandit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report
        path: backend/bandit-report.json
        retention-days: 30

  # Frontend code quality checks
  frontend-quality:
    name: Frontend Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Lint frontend code
      run: |
        cd frontend
        echo "Running ESLint..."
        npm run lint
    
    - name: Check frontend formatting
      run: |
        cd frontend
        echo "Checking code formatting with Prettier..."
        npm run format:check
    
    - name: Type checking
      run: |
        cd frontend
        echo "Running TypeScript type checking..."
        npm run type-check

  # Backend unit tests with coverage
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    needs: backend-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: |
          backend/requirements/base.txt
          backend/requirements/testing.txt
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-test-${{ hashFiles('backend/requirements/*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-test-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements/testing.txt
    
    - name: Run unit tests with coverage
      run: |
        cd backend
        echo "Running unit tests..."
        pytest tests/unit/ \
          --cov=app \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-report=html \
          --junit-xml=junit-unit.xml \
          --maxfail=5 \
          -v
    
    - name: Upload unit test coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend-unit
        name: backend-unit-coverage
        fail_ci_if_error: false
    
    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-unit-test-results
        path: |
          backend/junit-unit.xml
          backend/htmlcov/
        retention-days: 30

  # Frontend unit tests with coverage
  frontend-unit-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    needs: frontend-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run unit tests with coverage
      run: |
        cd frontend
        echo "Running frontend unit tests..."
        npm test -- --coverage --watchAll=false --passWithNoTests
    
    - name: Upload frontend test coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend-unit
        name: frontend-unit-coverage
        fail_ci_if_error: false
    
    - name: Upload frontend test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-unit-test-results
        path: frontend/coverage/
        retention-days: 30

  # Quality gate summary
  quality-gate-summary:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality, backend-unit-tests, frontend-unit-tests]
    if: always()
    
    steps:
    - name: Check quality gate status
      run: |
        echo "Quality Gate Results:"
        echo "===================="
        echo "Backend Quality: ${{ needs.backend-quality.result }}"
        echo "Frontend Quality: ${{ needs.frontend-quality.result }}"
        echo "Backend Unit Tests: ${{ needs.backend-unit-tests.result }}"
        echo "Frontend Unit Tests: ${{ needs.frontend-unit-tests.result }}"
        
        # Fail if any critical job failed
        if [[ "${{ needs.backend-quality.result }}" == "failure" || 
              "${{ needs.frontend-quality.result }}" == "failure" || 
              "${{ needs.backend-unit-tests.result }}" == "failure" || 
              "${{ needs.frontend-unit-tests.result }}" == "failure" ]]; then
          echo "‚ùå Quality gate failed!"
          exit 1
        else
          echo "‚úÖ Quality gate passed!"
        fi
    
    - name: Comment PR with quality results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const results = {
            'Backend Quality': '${{ needs.backend-quality.result }}',
            'Frontend Quality': '${{ needs.frontend-quality.result }}',
            'Backend Unit Tests': '${{ needs.backend-unit-tests.result }}',
            'Frontend Unit Tests': '${{ needs.frontend-unit-tests.result }}'
          };
          
          let comment = '## üîç Quality Gate Results\n\n';
          
          for (const [check, result] of Object.entries(results)) {
            const emoji = result === 'success' ? '‚úÖ' : result === 'failure' ? '‚ùå' : '‚ö†Ô∏è';
            comment += `${emoji} **${check}**: ${result}\n`;
          }
          
          const allPassed = Object.values(results).every(result => result === 'success');
          comment += `\n**Overall Status**: ${allPassed ? '‚úÖ PASSED' : '‚ùå FAILED'}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });