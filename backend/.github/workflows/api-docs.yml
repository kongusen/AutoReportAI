name: API Documentation Update

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/app/api/**'
      - 'backend/app/schemas/**'
      - 'backend/app/models/**'
      - 'backend/app/main.py'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/app/api/**'
      - 'backend/app/schemas/**'
      - 'backend/app/models/**'
      - 'backend/app/main.py'
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update documentation'
        required: false
        default: 'false'
        type: boolean

jobs:
  update-api-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements/base.txt
        pip install -r requirements/development.txt
    
    - name: Set up environment
      run: |
        cd backend
        cp .env.example .env
        echo "DATABASE_URL=sqlite:///./test.db" >> .env
        echo "REDIS_URL=redis://localhost:6379" >> .env
    
    - name: Start Redis
      uses: supercharge/redis-github-action@1.7.0
      with:
        redis-version: 7
    
    - name: Initialize database
      run: |
        cd backend
        python scripts/init_db.py
    
    - name: Generate API documentation
      run: |
        cd backend
        python scripts/auto_update_docs.py --ci
      env:
        PYTHONPATH: .
    
    - name: Check documentation changes
      id: check_changes
      run: |
        cd backend
        if git diff --quiet docs/api/; then
          echo "changes=false" >> $GITHUB_OUTPUT
        else
          echo "changes=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: api-documentation
        path: |
          backend/docs/api/
          !backend/docs/api/.auto_update_state.json
        retention-days: 30
    
    - name: Generate documentation summary
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        cd backend
        echo "## 📚 API文档更新摘要" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 统计文档文件
        doc_count=$(find docs/api -name "*.md" | wc -l)
        json_count=$(find docs/api -name "*.json" | wc -l)
        
        echo "- 📄 Markdown文档: $doc_count 个文件" >> $GITHUB_STEP_SUMMARY
        echo "- 📋 JSON规范: $json_count 个文件" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 显示变更的文件
        echo "### 变更的文件" >> $GITHUB_STEP_SUMMARY
        git diff --name-only docs/api/ | while read file; do
          echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 生成的文档" >> $GITHUB_STEP_SUMMARY
        echo "- [OpenAPI规范](docs/api/generated/openapi.json)" >> $GITHUB_STEP_SUMMARY
        echo "- [Postman集合](docs/api/generated/postman-collection.json)" >> $GITHUB_STEP_SUMMARY
        echo "- [API使用指南](docs/api/api-guide.md)" >> $GITHUB_STEP_SUMMARY
        echo "- [最佳实践](docs/api/best-practices.md)" >> $GITHUB_STEP_SUMMARY
        echo "- [常见问题](docs/api/faq.md)" >> $GITHUB_STEP_SUMMARY
    
    - name: Commit documentation updates
      if: steps.check_changes.outputs.changes == 'true' && github.event_name == 'push'
      run: |
        cd backend
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/api/
        git commit -m "docs: 自动更新API文档 [skip ci]" || exit 0
        git push
    
    - name: Create Pull Request
      if: steps.check_changes.outputs.changes == 'true' && github.event_name == 'pull_request'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "docs: 自动更新API文档"
        title: "📚 自动更新API文档"
        body: |
          ## 📚 API文档自动更新
          
          此PR包含基于最新API变更自动生成的文档更新。
          
          ### 更新内容
          - OpenAPI规范文件
          - Postman集合
          - API使用指南
          - 示例代码
          
          ### 验证步骤
          - [ ] 检查OpenAPI规范格式正确
          - [ ] 验证Postman集合可用
          - [ ] 确认文档内容准确
          
          ---
          *此PR由GitHub Actions自动生成*
        branch: docs/api-update-${{ github.run_number }}
        delete-branch: true
    
    - name: Validate OpenAPI specification
      run: |
        cd backend
        # 使用swagger-codegen验证OpenAPI规范
        if command -v swagger-codegen &> /dev/null; then
          swagger-codegen validate -i docs/api/generated/openapi.json
        else
          echo "swagger-codegen not available, skipping validation"
        fi
        
        # 基本JSON格式验证
        python -c "
        import json
        with open('docs/api/generated/openapi.json', 'r') as f:
            spec = json.load(f)
        
        required_keys = ['openapi', 'info', 'paths']
        for key in required_keys:
            assert key in spec, f'Missing required key: {key}'
        
        print('✅ OpenAPI规范验证通过')
        "
    
    - name: Test documentation links
      run: |
        cd backend
        # 检查文档中的内部链接
        python -c "
        import re
        from pathlib import Path
        
        def check_markdown_links(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # 查找markdown链接
            links = re.findall(r'\[([^\]]+)\]\(([^)]+)\)', content)
            broken_links = []
            
            for text, link in links:
                if link.startswith('http'):
                    continue  # 跳过外部链接
                
                if link.startswith('#'):
                    continue  # 跳过锚点链接
                
                # 检查相对路径文件是否存在
                link_path = file_path.parent / link
                if not link_path.exists():
                    broken_links.append((text, link))
            
            return broken_links
        
        docs_dir = Path('docs/api')
        all_broken = []
        
        for md_file in docs_dir.rglob('*.md'):
            broken = check_markdown_links(md_file)
            if broken:
                all_broken.extend([(str(md_file), text, link) for text, link in broken])
        
        if all_broken:
            print('❌ 发现损坏的链接:')
            for file_path, text, link in all_broken:
                print(f'  {file_path}: [{text}]({link})')
            exit(1)
        else:
            print('✅ 所有文档链接检查通过')
        "
    
    - name: Generate documentation metrics
      run: |
        cd backend
        python -c "
        import json
        from pathlib import Path
        
        docs_dir = Path('docs/api')
        
        # 统计文档指标
        metrics = {
            'markdown_files': len(list(docs_dir.rglob('*.md'))),
            'json_files': len(list(docs_dir.rglob('*.json'))),
            'example_files': len(list(docs_dir.glob('examples/*.md'))),
            'total_size': sum(f.stat().st_size for f in docs_dir.rglob('*') if f.is_file()),
        }
        
        # 分析OpenAPI规范
        openapi_file = docs_dir / 'generated' / 'openapi.json'
        if openapi_file.exists():
            with open(openapi_file, 'r') as f:
                spec = json.load(f)
            
            metrics['api_endpoints'] = len([
                path for path, methods in spec.get('paths', {}).items()
                for method in methods.keys()
                if method in ['get', 'post', 'put', 'delete', 'patch']
            ])
            metrics['api_tags'] = len(spec.get('tags', []))
        
        print('📊 文档指标:')
        for key, value in metrics.items():
            print(f'  {key}: {value}')
        
        # 保存指标到文件
        with open('docs/api/metrics.json', 'w') as f:
            json.dump(metrics, f, indent=2)
        "
    
    - name: Comment on PR
      if: github.event_name == 'pull_request' && steps.check_changes.outputs.changes == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // 读取CI报告
          const reportPath = path.join('backend', 'docs', 'api', 'ci_report.md');
          let reportContent = '';
          
          try {
            reportContent = fs.readFileSync(reportPath, 'utf8');
          } catch (error) {
            reportContent = '无法读取CI报告';
          }
          
          const comment = `## 📚 API文档更新报告
          
          ${reportContent}
          
          ### 🔍 验证结果
          - ✅ OpenAPI规范格式正确
          - ✅ 文档链接检查通过
          - ✅ 文档指标生成完成
          
          ---
          *此评论由GitHub Actions自动生成*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  deploy-docs:
    needs: update-api-docs
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download documentation artifacts
      uses: actions/download-artifact@v4
      with:
        name: api-documentation
        path: backend/docs/api/
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: backend/docs/api/
        destination_dir: api-docs
        commit_message: "docs: 部署API文档到GitHub Pages"
    
    - name: Update documentation index
      run: |
        echo "API文档已部署到: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/api-docs/"