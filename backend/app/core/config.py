import os
from typing import Dict

from dotenv import load_dotenv
from pydantic_settings import BaseSettings

load_dotenv()


class Settings(BaseSettings):
    PROJECT_NAME: str = "AutoReportAI"
    API_V1_STR: str = "/api/v1"

    # Database configuration
    db_user: str = os.getenv("POSTGRES_USER", "postgres")
    db_password: str = os.getenv("POSTGRES_PASSWORD", "postgres")
    db_host: str = os.getenv("POSTGRES_HOST", "localhost")
    db_port: str = os.getenv("POSTGRES_PORT", "5432")
    db_name: str = os.getenv("POSTGRES_DB", "postgres")

    # Use the dynamically constructed URL
    DATABASE_URL: str = (
        f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
    )

    # Redis configuration for rate limiting
    REDIS_URL: str = os.getenv("REDIS_URL", "redis://localhost:6379")

    # Service URLs for FastMCP
    SERVICE_URLS: Dict[str, str] = {
        "ai_service": os.getenv("AI_SERVICE_URL", "http://localhost:8000/api/v1/ai"),
        # We can add other services here in the future
    }

    # Email settings
    SMTP_SERVER: str = os.getenv("SMTP_SERVER", "smtp.gmail.com")
    SMTP_PORT: int = int(os.getenv("SMTP_PORT", 587))
    SMTP_USERNAME: str = os.getenv("SMTP_USERNAME", "")
    SMTP_PASSWORD: str = os.getenv("SMTP_PASSWORD", "")
    SMTP_USE_TLS: bool = os.getenv("SMTP_USE_TLS", "true").lower() == "true"
    SENDER_EMAIL: str = os.getenv("SENDER_EMAIL", "noreply@autoreportai.com")
    SENDER_NAME: str = os.getenv("SENDER_NAME", "AutoReportAI")

    # Legacy email settings for backward compatibility
    SMTP_HOST: str = os.getenv("SMTP_HOST", "smtp.example.com")
    SMTP_USER: str = os.getenv("SMTP_USER", "user@example.com")
    EMAILS_FROM_EMAIL: str = os.getenv("EMAILS_FROM_EMAIL", "noreply@example.com")
    EMAILS_FROM_NAME: str = os.getenv("EMAILS_FROM_NAME", "AutoReportAI")

    # WebSocket settings
    WS_HOST: str = os.getenv("WS_HOST", "localhost")
    WS_PORT: int = int(os.getenv("WS_PORT", 8000))

    # Notification settings
    ENABLE_EMAIL_NOTIFICATIONS: bool = (
        os.getenv("ENABLE_EMAIL_NOTIFICATIONS", "true").lower() == "true"
    )
    ENABLE_WEBSOCKET_NOTIFICATIONS: bool = (
        os.getenv("ENABLE_WEBSOCKET_NOTIFICATIONS", "true").lower() == "true"
    )

    test_db_user: str = os.getenv("TEST_POSTGRES_USER", "testuser")
    test_db_password: str = os.getenv("TEST_POSTGRES_PASSWORD", "testpassword")
    test_db_host: str = os.getenv("TEST_POSTGRES_HOST", "localhost")
    test_db_port: str = os.getenv("TEST_POSTGRES_PORT", "5433")
    test_db_name: str = os.getenv("TEST_POSTGRES_DB", "test_app")
    test_db_url: str = (
        f"postgresql://{test_db_user}:{test_db_password}@{test_db_host}:{test_db_port}/{test_db_name}"
    )

    # Security settings
    SECRET_KEY: str = os.getenv("SECRET_KEY", "a_very_secret_key")
    ACCESS_TOKEN_EXPIRE_MINUTES: int = int(os.getenv("ACCESS_TOKEN_EXPIRE_MINUTES", 30))
    ALGORITHM: str = "HS256"
    access_token_expire_minutes: int = 60

    # Encryption key for sensitive data.
    # IMPORTANT: Change this in production to a key generated by `cryptography.fernet.Fernet.generate_key()`
    ENCRYPTION_KEY: str = os.getenv(
        "ENCRYPTION_KEY", "DO2E-DOAveBMXpu1xMTl9fRjehX_1pbDnVZkuFRDA14="
    )

    class Config:
        case_sensitive = True
        env_file = ".env"
        extra = "ignore"


settings = Settings()
