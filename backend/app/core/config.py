import os
from typing import Dict, List, Optional

from dotenv import load_dotenv
from pydantic_settings import BaseSettings

load_dotenv()


class Settings(BaseSettings):
    PROJECT_NAME: str = "AutoReportAI"
    API_V1_STR: str = "/api/v1"

    # Database configuration
    db_user: str = os.getenv("POSTGRES_USER", "postgres")
    db_password: str = os.getenv("POSTGRES_PASSWORD", "postgres")
    db_host: str = os.getenv("POSTGRES_HOST", "localhost")
    db_port: str = os.getenv("POSTGRES_PORT", "5432")
    db_name: str = os.getenv("POSTGRES_DB", "postgres")

    # Use the dynamically constructed URL
    DATABASE_URL: str = (
        f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
    )

    # Redis configuration for rate limiting
    REDIS_URL: str = os.getenv("REDIS_URL", "redis://localhost:6379")


    # Email settings
    SMTP_SERVER: str = os.getenv("SMTP_SERVER", "smtp.gmail.com")
    SMTP_PORT: int = int(os.getenv("SMTP_PORT", 587))
    SMTP_USERNAME: str = os.getenv("SMTP_USERNAME", "")
    SMTP_PASSWORD: str = os.getenv("SMTP_PASSWORD", "")
    SMTP_USE_TLS: bool = os.getenv("SMTP_USE_TLS", "true").lower() == "true"
    SENDER_EMAIL: str = os.getenv("SENDER_EMAIL", "noreply@autoreportai.com")
    SENDER_NAME: str = os.getenv("SENDER_NAME", "AutoReportAI")

    # Legacy email settings for backward compatibility
    SMTP_HOST: str = os.getenv("SMTP_HOST", "smtp.example.com")
    SMTP_USER: str = os.getenv("SMTP_USER", "user@example.com")
    EMAILS_FROM_EMAIL: str = os.getenv("EMAILS_FROM_EMAIL", "noreply@example.com")
    EMAILS_FROM_NAME: str = os.getenv("EMAILS_FROM_NAME", "AutoReportAI")

    # WebSocket settings
    WS_HOST: str = os.getenv("WS_HOST", "localhost")
    WS_PORT: int = int(os.getenv("WS_PORT", 8000))

    # Notification settings
    ENABLE_EMAIL_NOTIFICATIONS: bool = (
        os.getenv("ENABLE_EMAIL_NOTIFICATIONS", "true").lower() == "true"
    )
    ENABLE_WEBSOCKET_NOTIFICATIONS: bool = (
        os.getenv("ENABLE_WEBSOCKET_NOTIFICATIONS", "true").lower() == "true"
    )

    test_db_user: str = os.getenv("TEST_POSTGRES_USER", "testuser")
    test_db_password: str = os.getenv("TEST_POSTGRES_PASSWORD", "testpassword")
    test_db_host: str = os.getenv("TEST_POSTGRES_HOST", "localhost")
    test_db_port: str = os.getenv("TEST_POSTGRES_PORT", "5433")
    test_db_name: str = os.getenv("TEST_POSTGRES_DB", "test_app")
    test_db_url: str = (
        f"postgresql://{test_db_user}:{test_db_password}@{test_db_host}:{test_db_port}/{test_db_name}"
    )

    # Security settings
    SECRET_KEY: str = os.getenv("SECRET_KEY", "a_very_secret_key")
    ACCESS_TOKEN_EXPIRE_MINUTES: int = int(os.getenv("ACCESS_TOKEN_EXPIRE_MINUTES", 30))
    ALGORITHM: str = "HS256"
    access_token_expire_minutes: int = 60

    # Encryption key for sensitive data.
    # IMPORTANT: Change this in production to a key generated by `cryptography.fernet.Fernet.generate_key()`
    ENCRYPTION_KEY: str = os.getenv(
        "ENCRYPTION_KEY", "DO2E-DOAveBMXpu1xMTl9fRjehX_1pbDnVZkuFRDA14="
    )

    # Celery配置
    CELERY_BROKER_URL: str = os.getenv("CELERY_BROKER_URL", REDIS_URL)
    CELERY_RESULT_BACKEND: str = os.getenv("CELERY_RESULT_BACKEND", REDIS_URL)
    CELERY_TASK_SERIALIZER: str = "json"
    CELERY_RESULT_SERIALIZER: str = "json"
    CELERY_ACCEPT_CONTENT: List[str] = ["json"]
    CELERY_TIMEZONE: str = "UTC"
    CELERY_ENABLE_UTC: bool = True
    CELERY_WORKER_PREFETCH_MULTIPLIER: int = int(os.getenv("CELERY_WORKER_PREFETCH_MULTIPLIER", 1))
    CELERY_TASK_ACKS_LATE: bool = True
    CELERY_WORKER_MAX_TASKS_PER_CHILD: int = int(os.getenv("CELERY_WORKER_MAX_TASKS_PER_CHILD", 1000))

    # 监控配置
    ENABLE_MONITORING: bool = os.getenv("ENABLE_MONITORING", "true").lower() == "true"
    MONITORING_CHECK_INTERVAL: int = int(os.getenv("MONITORING_CHECK_INTERVAL", 300))  # 5分钟
    
    # 告警阈值配置
    ALERT_FAILURE_RATE_WARNING: float = float(os.getenv("ALERT_FAILURE_RATE_WARNING", 0.1))  # 10%
    ALERT_FAILURE_RATE_CRITICAL: float = float(os.getenv("ALERT_FAILURE_RATE_CRITICAL", 0.2))  # 20%
    ALERT_AVG_TIME_WARNING: int = int(os.getenv("ALERT_AVG_TIME_WARNING", 600))  # 10分钟
    ALERT_ERROR_COUNT_WARNING: int = int(os.getenv("ALERT_ERROR_COUNT_WARNING", 50))  # 每小时50次
    
    # 管理员邮件配置
    ADMIN_EMAILS: List[str] = os.getenv("ADMIN_EMAILS", "admin@autoreportai.com").split(",")
    
    # AI服务配置
    DEFAULT_AI_MODEL: str = os.getenv("DEFAULT_AI_MODEL", "gpt-3.5-turbo")
    AI_REQUEST_TIMEOUT: int = int(os.getenv("AI_REQUEST_TIMEOUT", 300))  # 5分钟
    AI_MAX_RETRIES: int = int(os.getenv("AI_MAX_RETRIES", 3))
    
    # ETL配置
    ETL_BATCH_SIZE: int = int(os.getenv("ETL_BATCH_SIZE", 10000))
    ETL_QUERY_TIMEOUT: int = int(os.getenv("ETL_QUERY_TIMEOUT", 900))  # 15分钟
    
    # 缓存配置
    CACHE_DEFAULT_EXPIRE: int = int(os.getenv("CACHE_DEFAULT_EXPIRE", 3600))  # 1小时
    CACHE_AI_RESPONSE_EXPIRE: int = int(os.getenv("CACHE_AI_RESPONSE_EXPIRE", 3600))  # 1小时
    
    # 文件存储配置
    UPLOAD_DIR: str = os.getenv("UPLOAD_DIR", "./uploads")
    REPORT_OUTPUT_DIR: str = os.getenv("REPORT_OUTPUT_DIR", "./reports")
    MAX_UPLOAD_SIZE: int = int(os.getenv("MAX_UPLOAD_SIZE", 100 * 1024 * 1024))  # 100MB
    
    # MinIO配置
    MINIO_ENDPOINT: str = os.getenv("MINIO_ENDPOINT", "localhost:9000")
    MINIO_ACCESS_KEY: str = os.getenv("MINIO_ACCESS_KEY", "minioadmin")
    MINIO_SECRET_KEY: str = os.getenv("MINIO_SECRET_KEY", "minioadmin")
    MINIO_BUCKET_NAME: str = os.getenv("MINIO_BUCKET_NAME", "autoreport")
    MINIO_SECURE: bool = os.getenv("MINIO_SECURE", "false").lower() == "true"
    
    # 本地存储配置
    LOCAL_STORAGE_PATH: str = os.getenv("LOCAL_STORAGE_PATH", "./storage")
    FORCE_LOCAL_STORAGE: bool = os.getenv("FORCE_LOCAL_STORAGE", "false").lower() == "true"
    
    # API基础URL配置
    API_BASE_URL: str = os.getenv("API_BASE_URL", "http://localhost:8000")
    
    # 日志配置
    LOG_LEVEL: str = os.getenv("LOG_LEVEL", "INFO")
    LOG_FORMAT: str = os.getenv("LOG_FORMAT", "%(asctime)s - %(name)s - %(levelname)s - %(message)s")
    
    # 部署环境配置
    ENVIRONMENT: str = os.getenv("ENVIRONMENT", "development")
    DEBUG: bool = os.getenv("DEBUG", "false").lower() == "true"
    
    # API限流配置
    API_RATE_LIMIT: str = os.getenv("API_RATE_LIMIT", "100/minute")
    
    # 健康检查配置
    HEALTH_CHECK_ENABLED: bool = os.getenv("HEALTH_CHECK_ENABLED", "true").lower() == "true"
    
    # 用户初始化配置
    FIRST_SUPERUSER: str = os.getenv("FIRST_SUPERUSER", "admin")
    FIRST_SUPERUSER_EMAIL: str = os.getenv("FIRST_SUPERUSER_EMAIL", "admin@autoreportai.com")
    FIRST_SUPERUSER_PASSWORD: str = os.getenv("FIRST_SUPERUSER_PASSWORD", "password")
    
    # AI Provider初始化配置
    DEFAULT_AI_PROVIDER_NAME: str = os.getenv("DEFAULT_AI_PROVIDER_NAME", "OpenAI")
    DEFAULT_AI_PROVIDER_API_BASE: str = os.getenv("DEFAULT_AI_PROVIDER_API_BASE", "https://api.openai.com/v1")
    DEFAULT_AI_PROVIDER_API_KEY: str = os.getenv("DEFAULT_AI_PROVIDER_API_KEY", "sk-your-api-key")
    DEFAULT_AI_PROVIDER_MODELS: List[str] = os.getenv("DEFAULT_AI_PROVIDER_MODELS", "gpt-3.5-turbo,gpt-4").split(",")

    # CORS 配置（支持动态）
    CORS_ORIGINS: List[str] = os.getenv(
        "CORS_ORIGINS",
        "http://localhost:3000,http://127.0.0.1:3000",
    ).split(",")
    # 可选：使用正则动态匹配（例如 ^https?://192\.168\.61\.[0-9]+:3000$）
    CORS_ORIGIN_REGEX: Optional[str] = os.getenv("CORS_ORIGIN_REGEX") or None
    CORS_ALLOW_CREDENTIALS: bool = os.getenv("CORS_ALLOW_CREDENTIALS", "true").lower() == "true"
    CORS_ALLOW_METHODS: List[str] = os.getenv("CORS_ALLOW_METHODS", "*").split(",")
    CORS_ALLOW_HEADERS: List[str] = os.getenv("CORS_ALLOW_HEADERS", "*").split(",")

    class Config:
        case_sensitive = True
        env_file = ".env"
        extra = "ignore"


settings = Settings()
