# 生产环境多阶段构建 - 优化 DDD 架构和 AI/ML 性能
FROM python:3.11-slim AS base

# 基础环境变量
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONIOENCODING=utf-8 \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# =============================================================================
# 依赖构建阶段 - 预编译生产级依赖
# =============================================================================
FROM base AS deps-builder

# 安装编译依赖
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    libc6-dev \
    libpq-dev \
    libffi-dev \
    libssl-dev \
    pkg-config \
    git \
    && rm -rf /var/lib/apt/lists/*

# 预编译生产依赖
COPY requirements.txt /tmp/
# 升级基础工具确保兼容性
RUN pip install --upgrade pip setuptools wheel
# 预编译所有依赖包括其依赖关系
RUN pip wheel --no-cache-dir --wheel-dir /tmp/wheels \
    -r /tmp/requirements.txt

# =============================================================================
# 生产运行时阶段
# =============================================================================
FROM base AS production

# 设置工作目录
WORKDIR /app

# 安装运行时系统依赖
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    curl \
    postgresql-client \
    dumb-init \
    procps \
    && rm -rf /var/lib/apt/lists/*

# 生产环境内存优化
ENV MALLOC_ARENA_MAX=2 \
    MALLOC_MMAP_THRESHOLD_=131072 \
    MALLOC_TRIM_THRESHOLD_=131072 \
    MALLOC_MMAP_MAX_=65536

# AI 框架缓存目录
ENV LLAMAINDEX_CACHE_DIR=/app/cache/llamaindex \
    TRANSFORMERS_CACHE=/app/cache/transformers \
    HF_HOME=/app/cache/huggingface

# 安装预编译的依赖
COPY --from=deps-builder /tmp/wheels /tmp/wheels
COPY requirements.txt /tmp/
RUN pip install --find-links /tmp/wheels -r /tmp/requirements.txt && \
    rm -rf /tmp/wheels /tmp/requirements.txt

# 创建非root用户
RUN useradd --create-home --shell /bin/bash app \
    && chown -R app:app /app

# 创建 DDD 架构目录和缓存目录
RUN mkdir -p /app/{logs,cache,reports,uploads,storage} \
    /app/cache/{llamaindex,transformers,huggingface} \
    && chown -R app:app /app

# 分层复制应用代码 - 按 DDD 层级优化构建缓存
COPY --chown=app:app app/core/ /app/app/core/
COPY --chown=app:app app/models/ /app/app/models/
COPY --chown=app:app app/schemas/ /app/app/schemas/
COPY --chown=app:app app/crud/ /app/app/crud/
COPY --chown=app:app app/db/ /app/app/db/
COPY --chown=app:app app/services/ /app/app/services/
COPY --chown=app:app app/api/ /app/app/api/
COPY --chown=app:app app/websocket/ /app/app/websocket/
COPY --chown=app:app app/config/ /app/app/config/
COPY --chown=app:app app/__init__.py app/main.py /app/app/

# 复制配置文件和脚本
COPY --chown=app:app config/ /app/config/
COPY --chown=app:app scripts/ /app/scripts/
COPY --chown=app:app entrypoint.sh healthcheck.sh healthcheck_worker.sh /app/

# 脚本执行权限 (在字节码编译前设置)
RUN chmod +x /app/entrypoint.sh /app/healthcheck.sh /app/healthcheck_worker.sh /app/scripts/startup_check.py

# 生产环境 Python 字节码预编译 (保留 startup_check.py)
RUN python -m compileall -b /app/app/ /app/scripts/ && \
    find /app/app -name "*.py" -delete && \
    find /app/scripts -name "*.py" -not -name "startup_check.py" -delete && \
    find /app/app /app/scripts -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true

# 切换到非root用户
USER app

# 设置环境变量
ENV PYTHONPATH=/app \
    DEPLOYMENT_ENV=production \
    CONFIG_PATH=/app/config \
    LLAMAINDEX_CACHE_DIR=/app/cache/llamaindex \
    TRANSFORMERS_CACHE=/app/cache/transformers \
    HF_HOME=/app/cache/huggingface

# 暴露端口
EXPOSE 8000

# 增强的生产环境健康检查
HEALTHCHECK --interval=30s --timeout=15s --start-period=90s --retries=3 \
    CMD /app/healthcheck.sh

# 生产环境优化的启动命令
ENTRYPOINT ["/usr/bin/dumb-init", "--"]
CMD ["gunicorn", "app.main:app", \
     "--worker-class", "uvicorn.workers.UvicornWorker", \
     "--workers", "4", \
     "--bind", "0.0.0.0:8000", \
     "--timeout", "120", \
     "--keep-alive", "10", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "50", \
     "--preload", \
     "--worker-tmp-dir", "/dev/shm", \
     "--access-logfile", "-", \
     "--error-logfile", "-", \
     "--log-level", "info"]