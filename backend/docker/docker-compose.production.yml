version: '3.8'

services:
  # 主应用
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile.production
    container_name: autoreport-app
    restart: unless-stopped
    environment:
      - DEPLOYMENT_ENV=production
      - CONFIG_PATH=/app/config
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=autoreport
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    volumes:
      - ../config:/app/config:ro
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - autoreport_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`api.yourdomain.com`)"
      - "traefik.http.routers.app.tls=true"
      - "traefik.http.routers.app.tls.certresolver=letsencrypt"
      - "traefik.http.services.app.loadbalancer.server.port=8000"

  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: autoreport-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=autoreport
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - autoreport_network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: autoreport-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - autoreport_network

  # MCP语义分析服务
  mcp-semantic-analysis:
    image: autoreport/mcp-semantic-analysis:latest
    container_name: mcp-semantic-analysis
    restart: unless-stopped
    environment:
      - MCP_SERVER_PORT=8001
      - LOG_LEVEL=INFO
    ports:
      - "127.0.0.1:8001:8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - autoreport_network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # MCP SQL生成服务
  mcp-sql-generation:
    image: autoreport/mcp-sql-generation:latest
    container_name: mcp-sql-generation
    restart: unless-stopped
    environment:
      - MCP_SERVER_PORT=8002
      - LOG_LEVEL=INFO
    ports:
      - "127.0.0.1:8002:8002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - autoreport_network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # MCP数据执行服务
  mcp-data-execution:
    image: autoreport/mcp-data-execution:latest
    container_name: mcp-data-execution
    restart: unless-stopped
    environment:
      - MCP_SERVER_PORT=8003
      - LOG_LEVEL=INFO
    ports:
      - "127.0.0.1:8003:8003"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - autoreport_network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # MCP质量评估服务
  mcp-quality-assessment:
    image: autoreport/mcp-quality-assessment:latest
    container_name: mcp-quality-assessment
    restart: unless-stopped
    environment:
      - MCP_SERVER_PORT=8004
      - LOG_LEVEL=INFO
    ports:
      - "127.0.0.1:8004:8004"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - autoreport_network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Traefik负载均衡器
  traefik:
    image: traefik:v2.10
    container_name: autoreport-traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
    ports:
      - "80:80"
      - "443:443"
      - "127.0.0.1:8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt_data:/letsencrypt
    networks:
      - autoreport_network

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: autoreport-prometheus
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - autoreport_network

  # Grafana仪表板
  grafana:
    image: grafana/grafana:latest
    container_name: autoreport-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - autoreport_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  letsencrypt_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  autoreport_network:
    driver: bridge