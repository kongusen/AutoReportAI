================================================================================
AUTOREPORTAI PROMPTS 目录深度分析 - 执行总结
================================================================================
分析时间: 2025-10-30
分析级别: Very Thorough (超详细)
结果存储: /Users/shan/work/AutoReportAI/backend/docs/

================================================================================
1. 分析覆盖范围
================================================================================

目录路径: /Users/shan/work/AutoReportAI/backend/app/services/infrastructure/agents/prompts/

分析内容:
✅ 目录结构和文件组织 (物理结构 + 逻辑组织)
✅ 主要文件的功能和用途 (4个核心模块: system.py, stages.py, templates.py, __init__.py)
✅ 现有提示词的组织方式 (硬编码70% + 模板化30%)
✅ 与 AdaptivePromptGenerator 的潜在集成点 (5个集成点已识别)
✅ 需要改进的地方 (10个改进点 + 优先级划分)
✅ 代码质量和架构分析 (完整的架构图和数据流)

================================================================================
2. 核心发现
================================================================================

2.1 优势 (✅ 5个)
────────────────────────────────────────────────────────────────────────────
✅ 提示词组织清晰，分层合理 (3层: 系统 → 阶段 → 模板)
✅ 支持上下文感知的动态生成 (SystemPromptBuilder + ContextFormatter)
✅ 包含详细的执行指导和错误处理 (完整的6步骤SQL生成指导)
✅ 代码易于理解和扩展 (清晰的设计模式: Builder, Manager, Template)
✅ 预定义常量提供便利使用 (5个系统级 + 8个阶段级常量)

2.2 劣势 (❌ 5个)
────────────────────────────────────────────────────────────────────────────
❌ 模块导出不完整，API不清晰 (__init__.py 全部为TODO注释)
❌ 与 AdaptivePromptGenerator 隔离，代码重复 (runtime.py未导入任何prompts)
❌ 缺乏版本管理和动态优化 (无法回滚或从失败中学习)
❌ 缺少单元测试 (无专门的测试文件)
❌ 文档不完善 (API文档需从代码推断)

2.3 关键数据
────────────────────────────────────────────────────────────────────────────
代码规模:
  - 总行数: 1,892 行 (有效代码)
  - 总大小: 55 KB
  - 类的数量: 5个
  - 函数数量: 19个

组成结构:
  - system.py:   673 行 (35%) - 系统级提示构建
  - templates.py: 704 行 (37%) - 模板和格式化
  - stages.py:    501 行 (26%) - 阶段级提示管理
  - __init__.py:   14 行 (1%)  - 未导出功能

提示词分布:
  - 硬编码提示词: ~70% (1,300+ 行字符串)
  - 模板化提示词: ~15% (280+ 行template)
  - 工具类/函数: ~15% (280+ 行代码逻辑)

执行阶段覆盖:
  - 8个执行阶段 (INITIALIZATION → COMPLETION)
  - 8个阶段转换提示
  - 3个复杂度级别 (SIMPLE 0.3, MEDIUM 0.5, COMPLEX 0.8)
  - 9个预定义模板

================================================================================
3. 主要组件详解
================================================================================

3.1 system.py (673行)
────────────────────────────────────────────────────────────────────────────
核心类: SystemPromptBuilder
职责:
  - 定义Agent的基础系统提示 (520行)
  - 构建阶段特定的系统提示 (8个阶段)
  - 生成复杂度特定的策略提示 (3个级别)
  - 支持上下文感知的动态提示生成

关键特征:
  🔥 强制时间占位符使用 ({{start_date}}, {{end_date}})
  🔥 上下文优先原则 (分析上下文→识别缺口→使用工具→执行)
  🔥 错误自纠正机制 (表不存在→回退上下文→重新生成)

输出常量:
  - DEFAULT_SYSTEM_PROMPT
  - SCHEMA_DISCOVERY_PROMPT
  - SQL_GENERATION_PROMPT
  - DATA_ANALYSIS_PROMPT
  - CHART_GENERATION_PROMPT

3.2 stages.py (501行)
────────────────────────────────────────────────────────────────────────────
核心类: StagePromptManager
职责:
  - 管理8个执行阶段的提示和转换
  - 支持阶段间转换的提示引导
  - 提供上下文和复杂度感知的阶段提示

阶段覆盖:
  1. INITIALIZATION      - 任务理解、信息收集、规划制定
  2. SCHEMA_DISCOVERY    - 表结构探索、关系分析、上下文构建
  3. SQL_GENERATION      - 6步骤SQL生成指导 (最详细)
  4. SQL_VALIDATION      - 语法验证、逻辑验证、修复优化
  5. DATA_EXTRACTION     - 查询执行、数据采样、结果验证
  6. ANALYSIS            - 数据分析、业务洞察、结果总结
  7. CHART_GENERATION    - 图表选择、配置优化、交互设计
  8. COMPLETION          - 结果整合、质量检查、交付准备

特性:
  - 阶段转换提示 (8个)
  - 复杂度特定指导 (SQL_GENERATION, SQL_VALIDATION, ANALYSIS)
  - 动态上下文注入 (表名、列数、时间窗口、业务信息)

3.3 templates.py (704行)
────────────────────────────────────────────────────────────────────────────
核心类:
  - PromptTemplate: 基于string.Template的模板类
  - PromptTemplateManager: 管理9个预定义模板
  - ContextFormatter: 格式化各种上下文信息

9个预定义模板:
  1. basic_request       - 任务请求基础
  2. schema_discovery    - Schema发现
  3. sql_generation      - SQL生成 (110行, 最复杂)
  4. sql_validation      - SQL验证
  5. data_analysis       - 数据分析
  6. chart_generation    - 图表生成
  7. error_handling      - 错误处理
  8. result_summary      - 结果总结
  9. (支持动态注册)

格式化功能:
  - format_schema_context()   → Markdown表结构
  - format_business_context() → 关键值对列表
  - format_data_results()     → Markdown数据表
  - format_tool_calls()       → 编号工具调用列表

3.4 __init__.py (14行)
────────────────────────────────────────────────────────────────────────────
现状: 所有导出都被注释掉，功能未暴露
问题: 外部代码无法清晰导入prompt功能
需要: 启用导出并添加__all__列表

================================================================================
4. 与 AdaptivePromptGenerator 的集成分析
================================================================================

当前状态: 完全隔离
────────────────────────────────────────────────────────────────────────────
- runtime.py 中的 AdaptivePromptGenerator 不导入任何prompts模块内容
- AdaptivePromptGenerator 内部自行生成所有提示词内容
- 导致提示词逻辑分散，代码重复

潜在集成点 (5个)
────────────────────────────────────────────────────────────────────────────
1. 系统提示集成
   当前: AdaptivePromptGenerator 接受 base_system_prompt 参数
   改进: 使用 SystemPromptBuilder 生成系统提示

2. 阶段感知提示生成
   当前: AdaptivePromptGenerator 不知道当前执行阶段
   改进: 使用 StagePromptManager 生成阶段特定提示

3. 错误处理和修复建议
   当前: 硬编码的 _get_error_fix_suggestions()
   改进: 使用 PromptTemplateManager 的 error_handling 模板

4. 上下文注入
   当前: AdaptivePromptGenerator 不支持上下文注入
   改进: 使用 ContextFormatter 格式化各种上下文

5. 动态约束生成
   当前: _generate_dynamic_constraints() 硬编码逻辑
   改进: 可以利用 templates 中的约束模板

建议集成模式
────────────────────────────────────────────────────────────────────────────
from .prompts import (
    SystemPromptBuilder,
    StagePromptManager,
    PromptTemplateManager,
    ContextFormatter,
)

class AdaptivePromptGenerator:
    def __init__(self, goal, tracker, stage=None, complexity=None):
        self._system_builder = SystemPromptBuilder()
        self._stage_manager = StagePromptManager()
        self._template_manager = PromptTemplateManager()
        self._context_formatter = ContextFormatter()
    
    def generate_system_prompt(self):
        return self._system_builder.build_system_prompt(
            stage=self.stage,
            complexity=self.complexity
        )

================================================================================
5. 改进优先级详解
================================================================================

🔴 高优先级 (必须做)
────────────────────────────────────────────────────────────────────────────
1. 完成 __init__.py 导出 (工作量: 1小时)
   问题: 模块公共接口未暴露
   影响: 外部代码无法清晰导入
   方案: 启用导出 + 添加__all__列表
   
2. 集成 prompts 模块到 runtime.py (工作量: 3-4小时)
   问题: AdaptivePromptGenerator 与 prompts 隔离，代码重复
   影响: 修改提示词需要同时更新两个模块
   方案: 在 AdaptivePromptGenerator 中使用 prompts 组件
   
3. 完成 AdaptivePromptGenerator 与 prompts 的集成 (工作量: 2-3小时)
   问题: 提示词逻辑分散，难以维护
   影响: 无法统一管理提示词
   方案: 使用5个潜在集成点逐步集成

🟡 中优先级 (应该做)
────────────────────────────────────────────────────────────────────────────
4. 增加动态提示词优化机制 (工作量: 4-5小时)
   问题: 所有提示词都是静态的，无法从失败中学习
   建议: 创建 DynamicPromptOptimizer 类
   
5. 完善上下文格式化策略 (工作量: 2-3小时)
   问题: 上下文注入的灵活性不足
   建议: 为不同场景创建不同的格式化策略
   
6. 添加单元测试 (工作量: 2-3小时)
   问题: 提示词生成逻辑没有测试覆盖
   建议: 为三个主要类各添加5-10个测试
   
7. 完善文档 (工作量: 1-2小时)
   问题: API文档需从代码推断
   建议: 创建 README.md, API_REFERENCE.md, EXAMPLES.md

🟢 低优先级 (可以做)
────────────────────────────────────────────────────────────────────────────
8. 提示词版本管理 (工作量: 3-4小时)
   问题: 无法回滚或追踪提示词变化
   建议: 创建 PromptVersionManager 类
   
9. 性能优化(缓存) (工作量: 1小时)
   问题: 每次调用都重新生成提示
   建议: 创建 CachedPromptManager 类
   
10. 消除代码重复 (工作量: 2-3小时)
    问题: 相似的内容定义分散在多个地方
    建议: 创建统一的 PromptContentLibrary

================================================================================
6. 代码质量指标
================================================================================

可维护性分析
────────────────────────────────────────────────────────────────────────────
代码复杂度:
  - system.py:   中等 (多个private方法, 但逻辑清晰)
  - stages.py:   低-中等 (数据驱动, 易于扩展)
  - templates.py: 中等 (多个格式化方法, 但职责明确)

设计模式:
  ✅ Builder 模式 (SystemPromptBuilder)
  ✅ Manager 模式 (StagePromptManager, PromptTemplateManager)
  ✅ Template 方法模式 (PromptTemplate)
  ✅ Strategy 模式 (ContextFormatter 的静态方法)

代码重复度:
  - 硬编码的阶段目标、任务、工具在多处重复
  - 上下文格式化逻辑与系统提示中的格式化逻辑重复
  - 复杂度指导在system.py和stages.py中有相似定义

测试覆盖:
  - 目前: 无专门的测试文件
  - 缺少: 单元测试、集成测试、端到端测试

文档完整度:
  - 类级文档: ✅ 完整
  - 方法级文档: ✅ 大部分完整
  - API参考: ❌ 缺失
  - 使用示例: ❌ 缺失
  - 架构说明: ❌ 缺失

================================================================================
7. 关键创新点
================================================================================

7.1 时间占位符强制使用
────────────────────────────────────────────────────────────────────────────
特性:
  - 禁止硬编码日期: WHERE date >= '2024-01-01' ❌
  - 强制使用占位符: WHERE date >= '{{start_date}}' ✅
  - 支持多种占位符: {{start_date}}, {{end_date}}, {{execution_date}}, {{current_date}}

优势:
  - 提高SQL的可重用性
  - 方便动态日期替换
  - 减少人工日期输入错误

7.2 上下文优先原则
────────────────────────────────────────────────────────────────────────────
工作流程:
  1. 阅读和理解上下文 (Schema、字段、关系)
  2. 识别信息缺口 (是否需要更多信息)
  3. 使用工具补充 (仅在必要时调用工具)
  4. 执行任务 (基于完整信息完成)

优势:
  - 减少不必要的工具调用
  - 优先利用已有信息
  - 提高执行效率

7.3 错误自纠正机制
────────────────────────────────────────────────────────────────────────────
流程:
  1. 立即停止使用错误的表名
  2. 回退到系统消息中的表名 (Context中的表名)
  3. 用正确的表名重新生成SQL
  4. 绝对不要重复尝试不存在的表名

优势:
  - 自动从错误中恢复
  - 避免无限循环尝试
  - 提高系统鲁棒性

================================================================================
8. 文档生成
================================================================================

已生成的分析文档:
────────────────────────────────────────────────────────────────────────────
1. PROMPTS_DIRECTORY_ANALYSIS.md (7,000+ 行)
   - 完整的目录结构分析
   - 每个文件的详细功能说明
   - 与AdaptivePromptGenerator的集成分析
   - 10个改进点的详细建议
   - 优先级总结和建议行动

2. PROMPTS_ARCHITECTURE_VISUAL.md (400+ 行)
   - 模块关系图 (ASCII艺术)
   - 内部结构分解 (system.py, stages.py, templates.py)
   - 数据流图
   - 提示词分层结构
   - 执行阶段流程图
   - 关键创新点详解
   - 代码复杂度统计
   - 改进路线图
   - 与AdaptivePromptGenerator的关系图

文档位置:
────────────────────────────────────────────────────────────────────────────
/Users/shan/work/AutoReportAI/backend/docs/
├── PROMPTS_DIRECTORY_ANALYSIS.md (详细分析报告)
└── PROMPTS_ARCHITECTURE_VISUAL.md (可视化架构总结)

================================================================================
9. 后续建议
================================================================================

立即行动 (本周)
────────────────────────────────────────────────────────────────────────────
1. 阅读生成的两份分析文档
2. 评估改进的优先级和工作量
3. 创建集成计划

短期计划 (1-2周)
────────────────────────────────────────────────────────────────────────────
1. 完成 __init__.py 导出
2. 开始集成 AdaptivePromptGenerator 与 prompts 模块
3. 添加基本单元测试

中期计划 (2-4周)
────────────────────────────────────────────────────────────────────────────
1. 完成全部集成
2. 添加动态优化机制
3. 完善文档和使用示例

长期计划 (1个月以上)
────────────────────────────────────────────────────────────────────────────
1. 实施版本管理
2. 收集使用数据并优化
3. 考虑开发提示词可视化工具

================================================================================
10. 总结
================================================================================

AutoReportAI的prompts目录是一个组织清晰、功能完整的提示词管理系统，
具有以下特点:

优势:
  ✅ 分层合理 (系统级 → 阶段级 → 模板级)
  ✅ 上下文感知 (支持动态上下文注入)
  ✅ 功能详尽 (包含8个执行阶段, 9个模板)
  ✅ 易于扩展 (清晰的设计模式)

不足:
  ❌ 接口不清晰 (__init__.py未导出)
  ❌ 重复代码多 (与runtime.py隔离)
  ❌ 缺乏测试 (无单元测试)
  ❌ 文档不完 (缺API文档)

改进空间:
  - 与runtime.py集成 (统一提示词生成)
  - 动态优化机制 (从失败中学习)
  - 版本管理 (追踪变化)
  - 性能优化 (缓存提示词)

总体评价:
  系统架构清晰 (★★★★☆)
  代码质量良好 (★★★★☆)
  功能完整度 (★★★★☆)
  文档完整度 (★★☆☆☆)
  与其他模块集成 (★★☆☆☆)

================================================================================

分析完成于: 2025-10-30
分析员: Claude Code (Haiku 4.5)
详细报告: /Users/shan/work/AutoReportAI/backend/docs/PROMPTS_DIRECTORY_ANALYSIS.md
可视化总结: /Users/shan/work/AutoReportAI/backend/docs/PROMPTS_ARCHITECTURE_VISUAL.md

================================================================================
