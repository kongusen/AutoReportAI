"""Add multi-database schema support

Revision ID: 242196232698
Revises: 6d1e4bc38b74
Create Date: 2025-08-15 17:37:43.329434

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '242196232698'
down_revision: Union[str, Sequence[str], None] = '6d1e4bc38b74'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('databases',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('display_name', sa.String(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('data_source_id', sa.UUID(), nullable=False),
    sa.Column('table_count', sa.Integer(), nullable=True),
    sa.Column('total_size_mb', sa.BigInteger(), nullable=True),
    sa.Column('business_domain', sa.String(), nullable=True),
    sa.Column('data_sensitivity', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('last_analyzed', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['data_source_id'], ['data_sources.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('data_source_id', 'name', name='unique_database_per_source')
    )
    op.create_index('idx_database_source_name', 'databases', ['data_source_id', 'name'], unique=False)
    op.create_index(op.f('ix_databases_name'), 'databases', ['name'], unique=False)
    op.create_table('tables',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('display_name', sa.String(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('database_id', sa.UUID(), nullable=False),
    sa.Column('table_type', sa.Enum('TABLE', 'VIEW', 'MATERIALIZED_VIEW', 'EXTERNAL_TABLE', name='tabletype'), nullable=True),
    sa.Column('engine', sa.String(), nullable=True),
    sa.Column('charset', sa.String(), nullable=True),
    sa.Column('row_count', sa.BigInteger(), nullable=True),
    sa.Column('size_mb', sa.Float(), nullable=True),
    sa.Column('column_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('last_analyzed', sa.DateTime(), nullable=True),
    sa.Column('business_tags', sa.JSON(), nullable=True),
    sa.Column('data_sensitivity', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['database_id'], ['databases.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('database_id', 'name', name='unique_table_per_database')
    )
# op.create_index('idx_table_business_tags', 'tables', ['business_tags'], unique=False)  # 暂时跳过JSON索引
    op.create_index('idx_table_database_name', 'tables', ['database_id', 'name'], unique=False)
    op.create_index(op.f('ix_tables_name'), 'tables', ['name'], unique=False)
    op.create_table('table_columns',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('display_name', sa.String(), nullable=True),
    sa.Column('table_id', sa.UUID(), nullable=False),
    sa.Column('data_type', sa.Enum('INTEGER', 'BIGINT', 'FLOAT', 'DOUBLE', 'DECIMAL', 'STRING', 'TEXT', 'BOOLEAN', 'DATE', 'DATETIME', 'TIMESTAMP', 'JSON', 'ARRAY', 'UNKNOWN', name='columntype'), nullable=False),
    sa.Column('raw_type', sa.String(), nullable=False),
    sa.Column('max_length', sa.Integer(), nullable=True),
    sa.Column('precision', sa.Integer(), nullable=True),
    sa.Column('scale', sa.Integer(), nullable=True),
    sa.Column('is_nullable', sa.Boolean(), nullable=True),
    sa.Column('is_primary_key', sa.Boolean(), nullable=True),
    sa.Column('is_foreign_key', sa.Boolean(), nullable=True),
    sa.Column('is_unique', sa.Boolean(), nullable=True),
    sa.Column('is_indexed', sa.Boolean(), nullable=True),
    sa.Column('default_value', sa.String(), nullable=True),
    sa.Column('column_comment', sa.Text(), nullable=True),
    sa.Column('business_meaning', sa.String(), nullable=True),
    sa.Column('ordinal_position', sa.Integer(), nullable=False),
    sa.Column('null_count', sa.BigInteger(), nullable=True),
    sa.Column('unique_count', sa.BigInteger(), nullable=True),
    sa.Column('distinct_count', sa.BigInteger(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['table_id'], ['tables.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('table_id', 'name', name='unique_column_per_table')
    )
    op.create_index('idx_column_ordinal', 'table_columns', ['table_id', 'ordinal_position'], unique=False)
    op.create_index('idx_column_table_name', 'table_columns', ['table_id', 'name'], unique=False)
    op.create_index(op.f('ix_table_columns_name'), 'table_columns', ['name'], unique=False)
    op.create_table('table_indexes',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('table_id', sa.UUID(), nullable=False),
    sa.Column('index_type', sa.String(), nullable=True),
    sa.Column('is_unique', sa.Boolean(), nullable=True),
    sa.Column('is_primary', sa.Boolean(), nullable=True),
    sa.Column('columns', sa.JSON(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['table_id'], ['tables.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('table_id', 'name', name='unique_index_per_table')
    )
    op.create_table('table_relations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('parent_table_id', sa.UUID(), nullable=False),
    sa.Column('child_table_id', sa.UUID(), nullable=False),
    sa.Column('relation_type', sa.Enum('ONE_TO_ONE', 'ONE_TO_MANY', 'MANY_TO_MANY', name='relationtype'), nullable=False),
    sa.Column('parent_columns', sa.JSON(), nullable=False),
    sa.Column('child_columns', sa.JSON(), nullable=False),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('is_validated', sa.Boolean(), nullable=True),
    sa.Column('business_meaning', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['child_table_id'], ['tables.id'], ),
    sa.ForeignKeyConstraint(['parent_table_id'], ['tables.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('parent_table_id', 'child_table_id', 'name', name='unique_relation')
    )
    op.create_index('idx_relation_child', 'table_relations', ['child_table_id'], unique=False)
    op.create_index('idx_relation_parent', 'table_relations', ['parent_table_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_relation_parent', table_name='table_relations')
    op.drop_index('idx_relation_child', table_name='table_relations')
    op.drop_table('table_relations')
    op.drop_table('table_indexes')
    op.drop_index(op.f('ix_table_columns_name'), table_name='table_columns')
    op.drop_index('idx_column_table_name', table_name='table_columns')
    op.drop_index('idx_column_ordinal', table_name='table_columns')
    op.drop_table('table_columns')
    op.drop_index(op.f('ix_tables_name'), table_name='tables')
    op.drop_index('idx_table_database_name', table_name='tables')
    op.drop_index('idx_table_business_tags', table_name='tables')
    op.drop_table('tables')
    op.drop_index(op.f('ix_databases_name'), table_name='databases')
    op.drop_index('idx_database_source_name', table_name='databases')
    op.drop_table('databases')
    # ### end Alembic commands ###
