services:
  # Database service
  db:
    image: postgres:15-alpine
    container_name: autoreport_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-autoreport}
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-autoreport}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - autoreport-network

  # Redis cache service
  redis:
    image: redis:7-alpine
    container_name: autoreport_redis
    ports:
      - "${REDIS_PORT:-6380}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - autoreport-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: autoreport_backend
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@db:5432/autoreport}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - autoreport-network
    volumes:
      - backend_logs:/app/logs
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # MCP Server service  
  mcp-server:
    build:
      context: ./mcp-server
      dockerfile: Dockerfile
    container_name: autoreport_mcp
    ports:
      - "${MCP_SERVER_PORT:-8001}:8001"
    environment:
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=8001
      - BACKEND_BASE_URL=http://backend:8000/api/v1
      - BACKEND_TIMEOUT=30
      - DEFAULT_ADMIN_USERNAME=admin
      - DEFAULT_ADMIN_PASSWORD=password
      - SESSION_TIMEOUT=3600
      - MAX_SESSIONS=100
      - LOG_LEVEL=INFO
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - autoreport-network
    volumes:
      - mcp_logs:/app/logs
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

# Frontend service removed - using MCP interface only

  # Database administration (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: autoreport_pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@autoreport.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - autoreport-network
    profiles:
      - admin

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  backend_logs:
    driver: local
  mcp_logs:
    driver: local

# Custom network for service communication
networks:
  autoreport-network:
    driver: bridge 