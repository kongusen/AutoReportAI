services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-autoreport}_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-autoreport}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-autoreport}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - autoreport-network
    deploy:
      resources:
        limits:
          cpus: ${DB_MAX_CPUS:-0.5}
          memory: ${DB_MAX_MEMORY:-512M}
        reservations:
          memory: ${DB_MIN_MEMORY:-256M}

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-autoreport}_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ../backend/scripts/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - autoreport-network
    deploy:
      resources:
        limits:
          cpus: ${REDIS_MAX_CPUS:-0.25}
          memory: ${REDIS_MAX_MEMORY:-256M}
        reservations:
          memory: ${REDIS_MIN_MEMORY:-128M}

  # Backend API Service
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
      args:
        - HTTP_PROXY=${BUILD_HTTP_PROXY:-}
        - HTTPS_PROXY=${BUILD_HTTPS_PROXY:-}
        - NO_PROXY=${BUILD_NO_PROXY:-localhost,127.0.0.1}
    container_name: ${COMPOSE_PROJECT_NAME:-autoreport}_backend
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      # Service Configuration
      SERVICE_TYPE: api
      WORKERS: ${API_WORKERS:-1}
      
      # Database Configuration
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-autoreport}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-autoreport}
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      
      # Application Configuration
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SECRET_KEY: ${SECRET_KEY}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      
      # CORS Configuration
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://127.0.0.1:3000}
      
      # AI Provider Configuration
      AI_PROVIDER: ${AI_PROVIDER:-openai}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4}
      
      # File Storage Configuration
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      UPLOAD_PATH: /app/uploads
      REPORTS_PATH: /app/reports
      STORAGE_PATH: /app/storage
      
      # API Configuration
      API_BASE_URL: ${API_BASE_URL:-http://localhost:8000}
      API_RATE_LIMIT: ${API_RATE_LIMIT:-1000}
      
      # Email Configuration
      SMTP_SERVER: ${SMTP_SERVER:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      ENABLE_EMAIL_NOTIFICATIONS: ${ENABLE_EMAIL_NOTIFICATIONS:-false}
      
      # MinIO Configuration
      MINIO_ENDPOINT: ${MINIO_ENDPOINT:-}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-autoreport}
      FORCE_LOCAL_STORAGE: ${FORCE_LOCAL_STORAGE:-true}
      
      # Monitoring Configuration
      ENABLE_MONITORING: ${ENABLE_MONITORING:-true}
      
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
      - backend_reports:/app/reports
      - backend_storage:/app/storage
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - autoreport-network
    deploy:
      resources:
        limits:
          cpus: ${BACKEND_MAX_CPUS:-1.0}
          memory: ${BACKEND_MAX_MEMORY:-1G}
        reservations:
          memory: ${BACKEND_MIN_MEMORY:-512M}
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s

  # Frontend Service
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      args:
        - HTTP_PROXY=${BUILD_HTTP_PROXY:-}
        - HTTPS_PROXY=${BUILD_HTTPS_PROXY:-}
        - NO_PROXY=${BUILD_NO_PROXY:-localhost,127.0.0.1}
    container_name: ${COMPOSE_PROJECT_NAME:-autoreport}_frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
      # API URLs - configurable for different environments
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000/api/v1}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:8000/ws}
      # Internal API URL for server-side requests
      INTERNAL_API_URL: http://backend:8000/api/v1
    volumes:
      - frontend_public_data:/app/public
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - autoreport-network
    deploy:
      resources:
        limits:
          cpus: ${FRONTEND_MAX_CPUS:-0.5}
          memory: ${FRONTEND_MAX_MEMORY:-512M}
        reservations:
          memory: ${FRONTEND_MIN_MEMORY:-256M}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Worker - Background Task Processing
  celery-worker:
    build:
      context: ../backend
      dockerfile: Dockerfile
      args:
        - HTTP_PROXY=${BUILD_HTTP_PROXY:-}
        - HTTPS_PROXY=${BUILD_HTTPS_PROXY:-}
        - NO_PROXY=${BUILD_NO_PROXY:-localhost,127.0.0.1}
    container_name: ${COMPOSE_PROJECT_NAME:-autoreport}_celery_worker
    environment:
      # Service Configuration
      SERVICE_TYPE: worker
      
      # Celery Configuration
      CELERY_QUEUES: ${CELERY_QUEUES:-report_tasks,analysis_tasks,query_tasks,generation_tasks}
      CELERY_CONCURRENCY: ${CELERY_CONCURRENCY:-4}
      CELERY_MAX_TASKS: ${CELERY_MAX_TASKS:-100}
      CELERY_PREFETCH_MULTIPLIER: ${CELERY_PREFETCH_MULTIPLIER:-1}
      
      # Database Configuration
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-autoreport}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-autoreport}
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      
      # Application Configuration
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SECRET_KEY: ${SECRET_KEY}
      
      # AI Provider Configuration
      AI_PROVIDER: ${AI_PROVIDER:-openai}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4}
      
      # Agent Configuration
      AGENT_OPTIMIZATION_LEVEL: ${AGENT_OPTIMIZATION_LEVEL:-standard}
      AGENT_BATCH_SIZE: ${AGENT_BATCH_SIZE:-1000}
      AGENT_ENABLE_CACHING: ${AGENT_ENABLE_CACHING:-true}
      AGENT_CACHE_TTL: ${AGENT_CACHE_TTL:-3600}
      AGENT_MAX_RETRIES: ${AGENT_MAX_RETRIES:-3}
      
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
      - backend_reports:/app/reports
      - backend_storage:/app/storage
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - autoreport-network
    deploy:
      resources:
        limits:
          cpus: ${WORKER_MAX_CPUS:-1.0}
          memory: ${WORKER_MAX_MEMORY:-1G}
        reservations:
          memory: ${WORKER_MIN_MEMORY:-512M}
    command: ["/app/entrypoint.sh", "worker"]
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ../backend
      dockerfile: Dockerfile
      args:
        - HTTP_PROXY=${BUILD_HTTP_PROXY:-}
        - HTTPS_PROXY=${BUILD_HTTPS_PROXY:-}
        - NO_PROXY=${BUILD_NO_PROXY:-localhost,127.0.0.1}
    container_name: ${COMPOSE_PROJECT_NAME:-autoreport}_celery_beat
    environment:
      # Service Configuration
      SERVICE_TYPE: beat
      
      # Database Configuration
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-autoreport}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-autoreport}
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      
      # Application Configuration
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SECRET_KEY: ${SECRET_KEY}
      
    volumes:
      - backend_logs:/app/logs
      - celery_beat_data:/app/celerybeat
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - autoreport-network
    deploy:
      resources:
        limits:
          cpus: ${BEAT_MAX_CPUS:-0.25}
          memory: ${BEAT_MAX_MEMORY:-512M}
        reservations:
          memory: ${BEAT_MIN_MEMORY:-256M}
    command: ["/app/entrypoint.sh", "beat"]
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 40s

  # Flower Monitoring (Optional - for development/monitoring)
  # Note: Flower requires separate installation, will be fixed in future versions
  # flower:
  #   build:
  #     context: ../backend
  #     dockerfile: Dockerfile
  #     args:
  #       - HTTP_PROXY=${BUILD_HTTP_PROXY:-}
  #       - HTTPS_PROXY=${BUILD_HTTPS_PROXY:-}
  #       - NO_PROXY=${BUILD_NO_PROXY:-localhost,127.0.0.1}
  #   container_name: ${COMPOSE_PROJECT_NAME:-autoreport}_flower
  #   ports:
  #     - "${FLOWER_PORT:-5555}:5555"
  #   environment:
  #     # Service Configuration
  #     SERVICE_TYPE: flower
  #     
  #     # Redis Configuration
  #     CELERY_BROKER_URL: redis://redis:6379/1
  #     CELERY_RESULT_BACKEND: redis://redis:6379/2
  #     
  #     # Basic Auth for Flower
  #     FLOWER_BASIC_AUTH: ${FLOWER_BASIC_AUTH:-admin:password}
  #     
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   networks:
  #     - autoreport-network
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: ${FLOWER_MAX_CPUS:-0.25}
  #         memory: ${FLOWER_MAX_MEMORY:-256M}
  #       reservations:
  #         memory: ${FLOWER_MIN_MEMORY:-128M}
  #   command: ["/app/entrypoint.sh", "flower"]
  #   healthcheck:
  #     test: ["CMD", "/app/healthcheck.sh"]
  #     interval: 30s
  #     timeout: 15s
  #     retries: 3
  #     start_period: 20s
  #   profiles:
  #     - monitoring
  #     - dev

  # MinIO Object Storage (Optional)
  minio:
    image: minio/minio:latest
    container_name: ${COMPOSE_PROJECT_NAME:-autoreport}_minio
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - autoreport-network
    deploy:
      resources:
        limits:
          cpus: ${MINIO_MAX_CPUS:-0.5}
          memory: ${MINIO_MAX_MEMORY:-512M}
        reservations:
          memory: ${MINIO_MIN_MEMORY:-256M}
    profiles:
      - storage
      - prod

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local
  backend_reports:
    driver: local
  backend_storage:
    driver: local
  celery_beat_data:
    driver: local
  minio_data:
    driver: local
  frontend_public_data:
    driver: local

# Network configuration
networks:
  autoreport-network:
    driver: bridge
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET:-172.20.0.0/16}