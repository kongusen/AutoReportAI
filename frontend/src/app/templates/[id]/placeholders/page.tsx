'use client'

import { useEffect, useState } from 'react'
import { useParams, useRouter } from 'next/navigation'
import {
  CogIcon,
  BeakerIcon,
  PlayIcon,
  PauseIcon,
  CodeBracketIcon,
  TableCellsIcon,
  ClockIcon,
  CheckCircleIcon,
  ExclamationTriangleIcon,
  InformationCircleIcon,
  ArrowLeftIcon,
  DocumentDuplicateIcon,
  TrashIcon,
  PencilIcon,
  ClipboardDocumentIcon,
} from '@heroicons/react/24/outline'
import { PageHeader } from '@/components/layout/PageHeader'
import { Button } from '@/components/ui/Button'
import { Card, CardContent, CardHeader } from '@/components/ui/Card'
import { Badge } from '@/components/ui/Badge'
import { Progress } from '@/components/ui/Progress'
import { Modal } from '@/components/ui/Modal'
import { Textarea } from '@/components/ui/Textarea'
import { Input } from '@/components/ui/Input'
import { Select } from '@/components/ui/Select'
import { Switch } from '@/components/ui/Switch'
import { useTemplateStore } from '@/features/templates/templateStore'
import { ETLScriptManager } from '@/components/templates/ETLScriptManager'
import { PlaceholderConfig, PlaceholderAnalytics, DataSource } from '@/types'
import { formatRelativeTime } from '@/utils'
import { normalizePlaceholders, NormalizedPlaceholder, calculatePlaceholderStats, getPlaceholderTypeStyle } from '@/utils/placeholderUtils'
import { api } from '@/lib/api'
import { InlineAnalysisProgress } from '@/components/ui/InlineAnalysisProgress'
import { InlineTestProgress } from '@/components/ui/InlineTestProgress'
import toast from 'react-hot-toast'

export default function TemplatePlaceholdersPage() {
  const params = useParams()
  const router = useRouter()
  const templateId = params.id as string
  
  const { currentTemplate, getTemplate } = useTemplateStore()
  const [placeholders, setPlaceholders] = useState<NormalizedPlaceholder[]>([])
  const [analytics, setAnalytics] = useState<PlaceholderAnalytics | null>(null)
  const [dataSources, setDataSources] = useState<DataSource[]>([])
  const [selectedDataSource, setSelectedDataSource] = useState<string>(() => {
    // ‰ªélocalStorageÊÅ¢Â§çÊï∞ÊçÆÊ∫êÈÄâÊã©
    if (typeof window !== 'undefined') {
      return localStorage.getItem(`selectedDataSource_${templateId}`) || ''
    }
    return ''
  })
  const [loading, setLoading] = useState(true)
  const [analyzing, setAnalyzing] = useState(false)
  const [analyzingSingle, setAnalyzingSingle] = useState<{[key: string]: boolean}>({})
  const [validating, setValidating] = useState<{[key: string]: boolean}>({})
  const [testResults, setTestResults] = useState<{[key: string]: any}>({})
  
  // ÁºñËæëÁä∂ÊÄÅ
  const [editModalOpen, setEditModalOpen] = useState(false)
  const [selectedPlaceholder, setSelectedPlaceholder] = useState<NormalizedPlaceholder | null>(null)
  const [editForm, setEditForm] = useState({
    placeholder_name: '',
    placeholder_type: '',
    execution_order: 0,
    cache_ttl_hours: 24,
    is_active: true,
    generated_sql: '',
    description: ''
  })

  useEffect(() => {
    if (templateId) {
      loadData()
    }
  }, [templateId])


  const loadData = async () => {
    try {
      setLoading(true)
      
      // Âπ∂Ë°åÂä†ËΩΩÊï∞ÊçÆ
      const [templateResult, placeholdersResult, savedPlaceholdersResult, dataSourcesResult] = await Promise.allSettled([
        getTemplate(templateId),
        api.get(`/templates/${templateId}/preview`), // ‰ΩøÁî®È¢ÑËßàAPIËé∑ÂèñÂç†‰ΩçÁ¨¶
        api.get(`/placeholders/?template_id=${templateId}`), // Ëé∑ÂèñÂ∑≤‰øùÂ≠òÁöÑÂç†‰ΩçÁ¨¶ÈÖçÁΩÆ
        api.get('/data-sources')
      ])

      // Â§ÑÁêÜÂç†‰ΩçÁ¨¶Êï∞ÊçÆ - ÂêàÂπ∂È¢ÑËßàAPIÂíåÂ∑≤‰øùÂ≠òÁöÑÈÖçÁΩÆ
      if (placeholdersResult.status === 'fulfilled') {
        const placeholderData = placeholdersResult.value.data?.data || placeholdersResult.value.data || {}
        const rawPlaceholders = placeholderData.placeholders || []
        
        // ‰ΩøÁî®Â∑•ÂÖ∑ÂáΩÊï∞ËßÑËåÉÂåñÂç†‰ΩçÁ¨¶Êï∞ÊçÆ
        let normalizedPlaceholdersData = normalizePlaceholders(rawPlaceholders)
        
        // ÂêàÂπ∂Â∑≤‰øùÂ≠òÁöÑÂç†‰ΩçÁ¨¶ÈÖçÁΩÆ
        if (savedPlaceholdersResult.status === 'fulfilled') {
          const savedData = savedPlaceholdersResult.value.data?.data || []

          // üîß Ê∑ªÂä†Ë∞ÉËØïÊó•Âøó
          console.log('üîß [Debug] ‰ªéÊï∞ÊçÆÂ∫ìÂä†ËΩΩÁöÑÂç†‰ΩçÁ¨¶Êï∞ÊçÆ:', savedData)
          console.log('üîß [Debug] ÂΩìÂâçËßÑËåÉÂåñÁöÑÂç†‰ΩçÁ¨¶:', normalizedPlaceholdersData.map(p => ({ name: p.name, generated_sql: p.generated_sql })))

          const savedPlaceholdersMap = new Map(
            savedData.map((p: any) => [p.placeholder_name || p.name, p])
          )

          // üîß Ë∞ÉËØïÊò†Â∞ÑÂÖ≥Á≥ª
          console.log('üîß [Debug] Âç†‰ΩçÁ¨¶Êò†Â∞ÑÂÖ≥Á≥ª:')
          savedPlaceholdersMap.forEach((value, key) => {
            console.log(`  "${key}" -> generated_sql: "${(value as any).generated_sql}"`)
          })

          // Â∞Ü‰øùÂ≠òÁöÑÂàÜÊûêÁªìÊûúÂêàÂπ∂Âà∞ËßÑËåÉÂåñÊï∞ÊçÆ‰∏≠
          normalizedPlaceholdersData = normalizedPlaceholdersData.map(placeholder => {
            const savedPlaceholder = savedPlaceholdersMap.get(placeholder.name) as any
            if (savedPlaceholder) {
              console.log(`üîß [Debug] ÂêàÂπ∂Âç†‰ΩçÁ¨¶ "${placeholder.name}":`, {
                ÂéüÂßã: placeholder.generated_sql,
                Êï∞ÊçÆÂ∫ì: savedPlaceholder.generated_sql,
                ÊúÄÁªà: savedPlaceholder.generated_sql || ''
              })
              return {
                ...placeholder,
                id: savedPlaceholder.id, // Ê∑ªÂä†Êï∞ÊçÆÂ∫ìID
                generated_sql: savedPlaceholder.generated_sql || '',
                suggested_sql: savedPlaceholder.generated_sql || '',
                analysis: savedPlaceholder.description || savedPlaceholder.analysis || '',
                confidence_score: savedPlaceholder.confidence_score || 0,
                sql_validated: savedPlaceholder.sql_validated || false,
                agent_analyzed: true,
                status: 'analyzed'
              } as any
            }
            return placeholder
          })

          // üîß ÊúÄÁªàÁªìÊûúË∞ÉËØï
          console.log('üîß [Debug] ÂêàÂπ∂ÂêéÁöÑÂç†‰ΩçÁ¨¶Êï∞ÊçÆ:', normalizedPlaceholdersData.map(p => ({
            name: p.name,
            generated_sql: (p as any).generated_sql,
            id: (p as any).id
          })))
        }
        
        setPlaceholders(normalizedPlaceholdersData)
        
        // ËÆ°ÁÆóÁªüËÆ°‰ø°ÊÅØ
        const stats = calculatePlaceholderStats(normalizedPlaceholdersData)
        setAnalytics({
          total_placeholders: stats.totalCount,
          analyzed_placeholders: 0, // Ëøô‰∫õÊòØÊñ∞Ëß£ÊûêÁöÑÂç†‰ΩçÁ¨¶ÔºåËøòÊ≤°ÊúâÂàÜÊûê
          sql_validated_placeholders: 0,
          average_confidence_score: 0,
          cache_hit_rate: 0,
          analysis_coverage: 0,
          execution_stats: {
            total_executions: 0,
            successful_executions: 0,
            failed_executions: 0,
            average_execution_time_ms: 0
          }
        })
      }

      // Â§ÑÁêÜÊï∞ÊçÆÊ∫êÊï∞ÊçÆ
      if (dataSourcesResult.status === 'fulfilled') {
        const dsData = dataSourcesResult.value.data?.data || dataSourcesResult.value.data || []
        setDataSources(Array.isArray(dsData) ? dsData : dsData.items || [])
      }

    } catch (error) {
      console.error('Failed to load data:', error)
      toast.error('Âä†ËΩΩÊï∞ÊçÆÂ§±Ë¥•')
    } finally {
      setLoading(false)
    }
  }

  // ÈáçÊñ∞Ëß£ÊûêÂç†‰ΩçÁ¨¶
  const handleAnalyzePlaceholders = async () => {
    try {
      setAnalyzing(true)
      toast.loading('Ê≠£Âú®ÈáçÊñ∞Ëß£ÊûêÂç†‰ΩçÁ¨¶...', { duration: 1000 })
      
      // ‰ΩøÁî®Ê∑∑ÂêàÁÆ°ÁêÜÂô®ÈáçÊñ∞Ëß£ÊûêÂπ∂Â≠òÂÇ®Âç†‰ΩçÁ¨¶
      const response = await api.post(`/templates/${templateId}/placeholders/reparse`, {}, {
        params: { force_reparse: true }
      })
      
      if (response.data?.success) {
        toast.success(response.data.message || 'Âç†‰ΩçÁ¨¶ÈáçÊñ∞Ëß£ÊûêÂÆåÊàê')
        await loadData() // ÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆ‰ª•ÊòæÁ§∫Êñ∞Ëß£ÊûêÁöÑÂç†‰ΩçÁ¨¶
      } else {
        toast.error(response.data?.message || 'Âç†‰ΩçÁ¨¶ÈáçÊñ∞Ëß£ÊûêÂ§±Ë¥•')
      }
    } catch (error: any) {
      console.error('Failed to re-analyze placeholders:', error)
      toast.error(error.response?.data?.detail || 'Âç†‰ΩçÁ¨¶ÈáçÊñ∞Ëß£ÊûêÂ§±Ë¥•')
    } finally {
      setAnalyzing(false)
    }
  }

  // Âçï‰∏™Âç†‰ΩçÁ¨¶ÂàÜÊûê - Â¢ûÂä†Ë∂ÖÊó∂Êó∂Èó¥ÂíåËøõÂ∫¶ÊåáÁ§∫Âô®
  const handleAnalyzeSinglePlaceholder = async (placeholder: NormalizedPlaceholder) => {
    if (!selectedDataSource) {
      toast.error('ËØ∑ÂÖàÈÄâÊã©Êï∞ÊçÆÊ∫ê')
      return
    }

    const placeholderKey = placeholder.name
    try {
      setAnalyzingSingle(prev => ({ ...prev, [placeholderKey]: true }))

      // ‰ΩøÁî®Êõ¥ÈïøÁöÑË∂ÖÊó∂Êó∂Èó¥Ôºà90ÁßíÔºâÂíåÊòæÁ§∫ËøõÂ∫¶
      const response = await api.post('/placeholders/analyze', {
        placeholder_name: placeholder.name,
        placeholder_text: placeholder.text,
        template_id: templateId,
        data_source_id: selectedDataSource,
        template_context: currentTemplate?.content || ''
      }, {
        timeout: 90000 // 90ÁßíË∂ÖÊó∂
      })

      // Ê£ÄÊü•ÂìçÂ∫îÁªìÊûÑÔºåAPIÂèØËÉΩÁõ¥Êé•ËøîÂõûÊï∞ÊçÆËÄå‰∏çÊòØÂåÖË£ÖÁöÑÊ†ºÂºè
      const result = response.data?.data || response.data
      const isSuccess = response.data?.success !== undefined ? response.data.success : (result && result.generated_sql)

      // üîß Ê∑ªÂä†Ë∞ÉËØï‰ø°ÊÅØ
      console.log('üîß [Debug] APIÂìçÂ∫îÁªìÊûÑ:', response.data)
      console.log('üîß [Debug] ÊèêÂèñÁöÑresult:', result)
      console.log('üîß [Debug] isSuccess:', isSuccess)
      console.log('üîß [Debug] generated_sql:', result?.generated_sql)
      
      if (isSuccess && result) {
        // Ê£ÄÊü•ÊòØÂê¶ÊúâÈ™åËØÅÁªìÊûúÔºàÂë®ÊúüÊÄßÂç†‰ΩçÁ¨¶‰ºöÁõ¥Êé•ÂåÖÂê´È™åËØÅÁªìÊûúÔºâ
        if (result.test_result) {
          setTestResults(prev => ({
            ...prev,
            [placeholderKey]: result.test_result
          }))
        } else {
          // Ê∏ÖÈô§ËØ•Âç†‰ΩçÁ¨¶ÁöÑÈ™åËØÅÁªìÊûúÔºåÂõ†‰∏∫SQLÂèØËÉΩÂ∑≤ÁªèÊîπÂèò
          setTestResults(prev => {
            const updated = { ...prev }
            delete updated[placeholderKey]
            return updated
          })
        }

        // ‰ΩøÁî®callbackÂΩ¢ÂºèÁöÑsetStateÊù•Á°Æ‰øùËé∑ÂèñÊúÄÊñ∞Áä∂ÊÄÅ
        setPlaceholders(currentPlaceholders => {
          // ÂØªÊâæÂåπÈÖçÁöÑÂç†‰ΩçÁ¨¶
          let targetIndex = -1
          let matchedPlaceholder = null

          for (let i = 0; i < currentPlaceholders.length; i++) {
            const p = currentPlaceholders[i]
            if (p.name === placeholder.name && p.text === placeholder.text) {
              targetIndex = i
              matchedPlaceholder = p
              break
            }
          }

          if (targetIndex === -1) {
            return currentPlaceholders
          }

          // ÂàõÂª∫Êñ∞ÁöÑÊï∞ÁªÑÔºåÊõ¥Êñ∞ÊåáÂÆöÁ¥¢ÂºïÁöÑÂç†‰ΩçÁ¨¶
          const updatedPlaceholders = [...currentPlaceholders]
          updatedPlaceholders[targetIndex] = {
            ...matchedPlaceholder,
            id: result.placeholder_id || matchedPlaceholder?.id, // ‰øùÂ≠òÊï∞ÊçÆÂ∫ìID
            generated_sql: typeof result.generated_sql === 'object' ? result.generated_sql.sql || result.generated_sql[placeholder.name] : result.generated_sql,
            suggested_sql: typeof result.generated_sql === 'object' ? result.generated_sql.sql || result.generated_sql[placeholder.name] : result.generated_sql,
            analysis: result.analysis || result.analysis_result?.description,
            agent_analyzed: true,
            sql_validated: result.sql_validated,
            confidence_score: result.confidence_score,
            status: result.test_result ? 'tested' : 'analyzed',
            // ËÆæÁΩÆÈ™åËØÅÁªìÊûú
            last_test_result: result.test_result,
            // Êï∞ÊçÆÂ∫ì‰øùÂ≠òÁä∂ÊÄÅ
            db_saved: result.placeholder_db_saved
          } as any

          return updatedPlaceholders
        })

        // Ê†πÊçÆÊòØÂê¶ÊòØÂë®ÊúüÊÄßÂç†‰ΩçÁ¨¶ÊòæÁ§∫‰∏çÂêåÁöÑÊàêÂäüÊ∂àÊÅØ
        if (result.test_result && result.test_result.result_type === 'period_value') {
          toast.success(`Âë®ÊúüÊÄßÂç†‰ΩçÁ¨¶ÂàÜÊûêÂÆåÊàêÔºö${result.test_result.computed_value}`)
        } else {
          toast.success('Âç†‰ΩçÁ¨¶ÂàÜÊûêÂÆåÊàêÔºåSQLÂ∑≤Ëá™Âä®‰øùÂ≠ò')
        }

        // üíæ ÂèØÈÄâÔºöÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆ‰ª•Á°Æ‰øùÊï∞ÊçÆ‰∏ÄËá¥ÊÄßÔºàÂèØ‰ª•Ê≥®ÈáäÊéâ‰ª•ÊèêÈ´òÊÄßËÉΩÔºâ
        // setTimeout(() => loadData(), 1000)
      } else {
        toast.error(response.data?.message || 'ÂàÜÊûêÂ§±Ë¥•')
      }
    } catch (error: any) {
      console.error('Failed to analyze placeholder:', error)
      toast.error(error.response?.data?.detail || 'ÂàÜÊûêÂ§±Ë¥•')
    } finally {
      setAnalyzingSingle(prev => ({ ...prev, [placeholderKey]: false }))
    }
  }

  // SQLÈ™åËØÅ
  const handleValidateSQL = async (placeholder: NormalizedPlaceholder) => {
    const sql = typeof (placeholder as any).generated_sql === 'object' ? 
      (placeholder as any).generated_sql.sql || (placeholder as any).generated_sql[(placeholder as any).name] : 
      (placeholder as any).generated_sql
    if (!sql) {
      toast.error('ËØ∑ÂÖàÂàÜÊûêÂç†‰ΩçÁ¨¶ÁîüÊàêSQL')
      return
    }

    if (!selectedDataSource) {
      toast.error('ËØ∑ÂÖàÈÄâÊã©Êï∞ÊçÆÊ∫ê')
      return
    }

    const validationKey = placeholder.name
    try {
      setValidating(prev => ({ ...prev, [validationKey]: true }))
      toast.loading('Ê≠£Âú®È™åËØÅSQL...', { duration: 1000 })
      
      const response = await api.post('/placeholders/validate-sql', {
        sql_template: sql,
        data_source_id: selectedDataSource,
        placeholder_name: placeholder.name,
        execution_mode: 'test',
        days_offset: -1
      })
      
      if (response.data?.success) {
        const validationResult = response.data.data
        const testResult = {
          success: validationResult.execution_success || false,
          error: validationResult.error_message || '',
          data: validationResult.result_data || [],
          columns: validationResult.columns || [],
          row_count: validationResult.row_count || 0,
          execution_time_ms: validationResult.execution_time_ms || 0,
          sql_after_substitution: validationResult.sql_after_substitution || sql
        }
        setTestResults(prev => ({ ...prev, [validationKey]: testResult }))
        
        // Êõ¥Êñ∞Âç†‰ΩçÁ¨¶Áä∂ÊÄÅ
        setPlaceholders(prev => 
          prev.map(p => 
            p.name === placeholder.name 
              ? { 
                  ...p, 
                  last_test_result: testResult,
                  status: testResult.success ? 'tested' : 'error'
                } as any
              : p
          )
        )
        
        toast.success('SQLÈ™åËØÅÂÆåÊàê')
      } else {
        toast.error(response.data?.message || 'SQLÈ™åËØÅÂ§±Ë¥•')
      }
    } catch (error: any) {
      console.error('Failed to validate SQL:', error)
      toast.error(error.response?.data?.detail || 'SQLÈ™åËØÅÂ§±Ë¥•')
    } finally {
      setValidating(prev => ({ ...prev, [validationKey]: false }))
    }
  }

  // Â§çÂà∂SQLÂà∞Ââ™Ë¥¥Êùø
  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text)
      toast.success('SQLÂ∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø')
    } catch (error) {
      toast.error('Â§çÂà∂Â§±Ë¥•')
    }
  }

  // ‰ΩøÁî®AgentÂàÜÊûê
  const handleAgentAnalysis = async (dataSourceId: string) => {
    try {
      setAnalyzing(true)
      toast.loading('Ê≠£Âú®‰ΩøÁî®AgentÂàÜÊûêÂç†‰ΩçÁ¨¶...', { duration: 2000 })
      
      const response = await api.post(`/templates/${templateId}/analyze-with-agent`, {}, {
        params: { data_source_id: dataSourceId, force_reanalyze: true }
      })
      
      if (response.data?.success) {
        // Áõ¥Êé•‰ΩøÁî®AgentÂàÜÊûêËøîÂõûÁöÑÊï∞ÊçÆÊõ¥Êñ∞Âç†‰ΩçÁ¨¶ÂàóË°®
        const analysisData = response.data.data
        const analyzedPlaceholders = analysisData?.placeholders || []
        
        // Â∞ÜAgentÂàÜÊûêÁöÑÁªìÊûúËßÑËåÉÂåñÂπ∂Êõ¥Êñ∞Âà∞ÂâçÁ´ØÊòæÁ§∫
        const normalizedAnalyzedData = normalizePlaceholders(analyzedPlaceholders)
        setPlaceholders(normalizedAnalyzedData)
        
        // Êõ¥Êñ∞ÁªüËÆ°‰ø°ÊÅØ
        const analysisStats = analysisData?.analysis_summary || {}
        const workflowDetails = analysisData?.workflow_details || {}
        
        setAnalytics({
          total_placeholders: analysisStats.total_placeholders || analyzedPlaceholders.length,
          analyzed_placeholders: analysisStats.analyzed_placeholders || analyzedPlaceholders.length,
          sql_validated_placeholders: analyzedPlaceholders.filter((p: any) => p.suggested_sql).length,
          average_confidence_score: analysisStats.confidence_average || 0.9,
          cache_hit_rate: 0,
          analysis_coverage: 100,
          execution_stats: {
            total_executions: 1,
            successful_executions: 1,
            failed_executions: 0,
            average_execution_time_ms: analysisStats.execution_time ? Math.round(analysisStats.execution_time * 1000) : 0
          }
        })
        
        toast.success(response.data?.message || 'AgentÂàÜÊûêÂÆåÊàê')
        
        // ‰∏çÈúÄË¶ÅÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆÔºåÂõ†‰∏∫Êàë‰ª¨Â∑≤ÁªèÊúâ‰∫ÜAgentÂàÜÊûêÁöÑÊúÄÊñ∞ÁªìÊûú
        // await loadData()
      } else {
        toast.error(response.data?.message || 'AgentÂàÜÊûêÂ§±Ë¥•')
      }
    } catch (error: any) {
      console.error('Failed to analyze with agent:', error)
      toast.error(error.response?.data?.detail || 'AgentÂàÜÊûêÂ§±Ë¥•')
    } finally {
      setAnalyzing(false)
    }
  }

  // ÁºñËæëÂç†‰ΩçÁ¨¶
  const handleEditPlaceholder = (placeholder: NormalizedPlaceholder) => {
    setSelectedPlaceholder(placeholder)
    setEditForm({
      placeholder_name: placeholder.name,
      placeholder_type: placeholder.type || 'ÂèòÈáè',
      execution_order: 0, // ËßÑËåÉÂåñÁöÑÂç†‰ΩçÁ¨¶Ê≤°Êúâexecution_orderÔºå‰ΩøÁî®ÈªòËÆ§ÂÄº
      cache_ttl_hours: 24,
      is_active: true,
      generated_sql: (placeholder as any).generated_sql || '',
      description: placeholder.description || ''
    })
    setEditModalOpen(true)
  }

  // ‰øùÂ≠òÁºñËæë - ËøûÊé•Âà∞ÂêéÁ´ØAPI
  const handleSaveEdit = async () => {
    if (!selectedPlaceholder) return

    try {
      // ÂáÜÂ§áÊõ¥Êñ∞Êï∞ÊçÆ
      const updateData = {
        generated_sql: editForm.generated_sql,
        execution_order: editForm.execution_order,
        cache_ttl_hours: editForm.cache_ttl_hours,
        is_active: editForm.is_active,
        placeholder_type: editForm.placeholder_type,
        description: editForm.description
      }

      // Â¶ÇÊûúÊúâplaceholder IDÔºåË∞ÉÁî®Êõ¥Êñ∞API
      if (selectedPlaceholder.id) {
        const response = await api.put(`/placeholders/${selectedPlaceholder.id}/sql`, updateData)

        if (response.data.success) {
          toast.success('Âç†‰ΩçÁ¨¶ÈÖçÁΩÆÂ∑≤‰øùÂ≠ò')

          // Êõ¥Êñ∞Êú¨Âú∞Áä∂ÊÄÅ
          setPlaceholders(currentPlaceholders =>
            currentPlaceholders.map(p =>
              p.name === selectedPlaceholder.name && p.text === selectedPlaceholder.text
                ? { ...p, ...updateData }
                : p
            )
          )
        } else {
          toast.error(response.data.message || '‰øùÂ≠òÂ§±Ë¥•')
        }
      } else {
        // Ê≤°ÊúâIDÁöÑÂç†‰ΩçÁ¨¶ÔºåÊèêÁ§∫Áî®Êà∑ÂÖàÂàÜÊûê
        toast.error('ËØ∑ÂÖàÂàÜÊûêÂç†‰ΩçÁ¨¶ÁîüÊàêÊï∞ÊçÆÂ∫ìËÆ∞ÂΩï')
      }

      setEditModalOpen(false)

    } catch (error: any) {
      console.error('Failed to update placeholder:', error)
      toast.error(error.response?.data?.detail || 'Âç†‰ΩçÁ¨¶Êõ¥Êñ∞Â§±Ë¥•')
    }
  }

  // Ëé∑ÂèñÂç†‰ΩçÁ¨¶Áä∂ÊÄÅÈ¢úËâ≤
  const getPlaceholderStatusBadge = (placeholder: NormalizedPlaceholder) => {
    const hasGeneratedSql = (placeholder as any).generated_sql
    const hasSuggestedSql = (placeholder as any).suggested_sql
    const hasWorkflowData = (placeholder as any).workflow_data
    const status = (placeholder as any).status
    const testResult = testResults[placeholder.name]
    
    // Ê£ÄÊü•SQLÈ™åËØÅÁä∂ÊÄÅ
    if (testResult) {
      if (testResult.success) {
        return <Badge variant="success">Â∑≤È™åËØÅ</Badge>
      } else {
        return <Badge variant="destructive">È™åËØÅÂ§±Ë¥•</Badge>
      }
    }
    
    // Ê£ÄÊü•ÊòØÂê¶ÊúâSQLÁîüÊàê
    if (hasGeneratedSql || hasSuggestedSql) {
      return <Badge variant="success">Â∑≤Ëß£Êûê</Badge>
    } else if (hasWorkflowData) {
      return <Badge variant="warning">ÈÉ®ÂàÜÂàÜÊûê</Badge>
    } else {
      return <Badge variant="secondary">Êú™Ëß£Êûê</Badge>
    }
  }

  // Ëé∑ÂèñÁ±ªÂûãBadgeÊ†∑Âºè
  const getTypeBadgeVariant = (type: string) => {
    const typeMap: Record<string, any> = {
      'ÁªüËÆ°': 'success',
      'ÂõæË°®': 'info',
      'Ë°®Ê†º': 'info',
      'ÂàÜÊûê': 'warning',
      'Êó•ÊúüÊó∂Èó¥': 'warning',
      'Ê†áÈ¢ò': 'info',
      'ÊëòË¶Å': 'secondary',
      '‰ΩúËÄÖ': 'secondary',
      'ÂèòÈáè': 'secondary',
      '‰∏≠Êñá': 'secondary',
      'ÊñáÊú¨': 'secondary',
      'ÈîôËØØ': 'destructive',
      'Á≥ªÁªüÈîôËØØ': 'destructive'
    }
    return typeMap[type] || 'secondary'
  }

  // Ëé∑ÂèñÁΩÆ‰ø°Â∫¶È¢úËâ≤
  const getConfidenceColor = (score: number) => {
    if (score >= 0.8) return 'text-green-600'
    if (score >= 0.6) return 'text-yellow-600'
    return 'text-red-600'
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
      </div>
    )
  }

  return (
    <>
      <PageHeader
        title={
          <div className="flex items-center">
            <Button
              variant="outline"
              size="sm"
              onClick={() => router.back()}
              className="mr-4"
            >
              <ArrowLeftIcon className="w-4 h-4 mr-1" />
              ËøîÂõû
            </Button>
            Âç†‰ΩçÁ¨¶ÁÆ°ÁêÜ
          </div>
        }
        description={`Ê®°Êùø"${currentTemplate?.name}"ÁöÑÂç†‰ΩçÁ¨¶ÈÖçÁΩÆÔºåÁîüÊàêÂíåÈ™åËØÅSQLÊü•ËØ¢`}
        actions={
          <div className="flex space-x-2">
            <Button
              variant="outline"
              onClick={handleAnalyzePlaceholders}
              disabled={analyzing}
            >
              <BeakerIcon className="w-4 h-4 mr-2" />
              {analyzing ? 'Ëß£Êûê‰∏≠...' : 'ÈáçÊñ∞Ëß£Êûê'}
            </Button>
          </div>
        }
      />

      {/* Êï∞ÊçÆÊ∫êÈÄâÊã©Âå∫Âüü */}
      <Card className="mb-6">
        <CardContent className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">Êï∞ÊçÆÊ∫êÈÖçÁΩÆ</h3>
              <p className="text-sm text-gray-600">ÈÄâÊã©Êï∞ÊçÆÊ∫êÁî®‰∫éÂç†‰ΩçÁ¨¶ÂàÜÊûêÂíåSQLÈ™åËØÅ</p>
            </div>
            <div className="flex items-center space-x-4">
              <div className="min-w-[300px]">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ÈÄâÊã©Êï∞ÊçÆÊ∫ê:
                </label>
                <Select
                  options={dataSources.map(ds => ({
                    label: `${ds.name} (${ds.source_type})`,
                    value: ds.id
                  }))}
                  placeholder="ËØ∑ÈÄâÊã©Êï∞ÊçÆÊ∫ê..."
                  value={selectedDataSource}
                  onChange={(value) => {
                    setSelectedDataSource(value as string)
                    // ‰øùÂ≠òÂà∞localStorage
                    if (typeof window !== 'undefined') {
                      localStorage.setItem(`selectedDataSource_${templateId}`, value as string)
                    }
                  }}
                  className="w-full"
                />
              </div>
              {selectedDataSource && (
                <div className="flex flex-col items-center">
                  <div className="text-xs text-green-600 mb-1">‚úÖ Â∑≤ÈÄâÊã©</div>
                  <div className="text-xs text-gray-500">
                    {dataSources.find(ds => ds.id === selectedDataSource)?.name}
                  </div>
                </div>
              )}
            </div>
          </div>
          
          {selectedDataSource && (
            <div className="mt-4 p-3 bg-blue-50 rounded-md">
              <p className="text-sm text-blue-800">
                Áé∞Âú®ÂèØ‰ª•ÂØπÂç†‰ΩçÁ¨¶ËøõË°åÂàÜÊûêÂíåSQLÈ™åËØÅ‰∫Ü
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* ÁªüËÆ°Ê¶ÇËßà */}
      {analytics && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center mr-3">
                  <TableCellsIcon className="w-4 h-4 text-blue-600" />
                </div>
                <div>
                  <p className="text-sm font-medium text-gray-600">ÊÄªÂç†‰ΩçÁ¨¶</p>
                  <p className="text-2xl font-bold text-gray-900">{analytics.total_placeholders}</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <div className="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center mr-3">
                  <CheckCircleIcon className="w-4 h-4 text-green-600" />
                </div>
                <div>
                  <p className="text-sm font-medium text-gray-600">Â∑≤ÂàÜÊûê</p>
                  <p className="text-2xl font-bold text-gray-900">{analytics.analyzed_placeholders}</p>
                  <p className="text-xs text-gray-500">
                    {analytics.analysis_coverage.toFixed(1)}% Ë¶ÜÁõñÁéá
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <div className="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center mr-3">
                  <CodeBracketIcon className="w-4 h-4 text-purple-600" />
                </div>
                <div>
                  <p className="text-sm font-medium text-gray-600">SQLÂ∑≤È™åËØÅ</p>
                  <p className="text-2xl font-bold text-gray-900">{analytics.sql_validated_placeholders}</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <div className="w-8 h-8 bg-orange-100 rounded-lg flex items-center justify-center mr-3">
                  <InformationCircleIcon className="w-4 h-4 text-orange-600" />
                </div>
                <div>
                  <p className="text-sm font-medium text-gray-600">Âπ≥ÂùáÁΩÆ‰ø°Â∫¶</p>
                  <p className={`text-2xl font-bold ${getConfidenceColor(analytics.average_confidence_score)}`}>
                    {(analytics.average_confidence_score * 100).toFixed(1)}%
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Âç†‰ΩçÁ¨¶ÂàóË°® */}
      <div className="space-y-4">
        {placeholders.length === 0 ? (
          <Card>
            <CardContent className="p-12 text-center">
              <TableCellsIcon className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">ÊöÇÊó†Âç†‰ΩçÁ¨¶</h3>
              <p className="text-gray-500 mb-4">
                ËØ•Ê®°ÊùøËøòÊ≤°ÊúâÂç†‰ΩçÁ¨¶ÈÖçÁΩÆÔºåËØ∑ÂÖàÂàÜÊûêÊ®°ÊùøÂÜÖÂÆπ
              </p>
              <Button onClick={handleAnalyzePlaceholders} disabled={analyzing}>
                <BeakerIcon className="w-4 h-4 mr-2" />
                ÂºÄÂßãËß£Êûê
              </Button>
            </CardContent>
          </Card>
        ) : (
          placeholders.map((placeholder, index) => {
            const hasGeneratedSql = typeof (placeholder as any).generated_sql === 'object' ? 
              (placeholder as any).generated_sql.sql || (placeholder as any).generated_sql[(placeholder as any).name] : 
              (placeholder as any).generated_sql || (placeholder as any).suggested_sql
            const testResult = testResults[placeholder.name]
            const isValidatingThis = validating[placeholder.name]
            const isAnalyzingThis = analyzingSingle[placeholder.name]
            
            
            return (
              <Card key={`${placeholder.name}-${index}`} className="border border-gray-200 bg-white">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 p-4 relative">
                  {/* Â∑¶ÂçäÈÉ®ÂàÜÔºöÂü∫Êú¨‰ø°ÊÅØ+ÈÖçÁΩÆ */}
                  <div className="space-y-3">
                    <div>
                      <div className="flex items-start justify-between mb-2">
                        <div>
                          <h3 className="text-sm font-medium text-gray-900 mb-1">
                            {placeholder.name}
                          </h3>
                          <code className="text-xs text-gray-600 bg-gray-50 px-2 py-1 rounded">
                            {placeholder.text}
                          </code>
                        </div>
                        <div className="flex items-center gap-1">
                          <span className="text-xs text-gray-500">{placeholder.type || 'ÂèòÈáè'}</span>
                          {getPlaceholderStatusBadge(placeholder)}
                        </div>
                      </div>
                    </div>

                    {/* Êìç‰ΩúÊåâÈíÆ */}
                    <div className="flex gap-2">
                      {!hasGeneratedSql ? (
                        <Button
                          size="sm"
                          onClick={() => handleAnalyzeSinglePlaceholder(placeholder)}
                          disabled={isAnalyzingThis || !selectedDataSource}
                          className="flex-1 text-xs bg-black text-white hover:bg-gray-800 disabled:bg-gray-300 disabled:text-gray-500"
                        >
                          {isAnalyzingThis ? 'ÂàÜÊûê‰∏≠' : 'ÂàÜÊûê'}
                        </Button>
                      ) : (
                        <>
                          <Button
                            size="sm"
                            onClick={() => handleValidateSQL(placeholder)}
                            disabled={isValidatingThis || !selectedDataSource}
                            className="flex-1 text-xs bg-gray-800 text-white hover:bg-black disabled:bg-gray-300 disabled:text-gray-500"
                          >
                            {isValidatingThis ? 'È™åËØÅ‰∏≠' : 'È™åËØÅ'}
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => handleAnalyzeSinglePlaceholder(placeholder)}
                            disabled={isAnalyzingThis || !selectedDataSource}
                            className="text-xs border-gray-300 text-gray-600 hover:bg-gray-50 disabled:text-gray-400"
                          >
                            ÈáçÊñ∞ÂàÜÊûê
                          </Button>
                        </>
                      )}
                    </div>
                  </div>

                  {/* Âè≥ÂçäÈÉ®ÂàÜÔºöSQL+È™åËØÅÁªìÊûú */}
                  <div className="space-y-3">
                    {/* SQLÂå∫Âüü */}
                    <div>
                      <div className="flex items-center justify-between mb-1">
                        <span className="text-xs text-gray-500">SQL</span>
                        {hasGeneratedSql && (
                          <button
                            onClick={() => copyToClipboard(
                              typeof hasGeneratedSql === 'object' ?
                                hasGeneratedSql.sql || hasGeneratedSql[placeholder.name] :
                                hasGeneratedSql
                            )}
                            className="text-xs text-gray-400 hover:text-gray-600"
                          >
                            Â§çÂà∂
                          </button>
                        )}
                      </div>

                      {isAnalyzingThis ? (
                        <InlineAnalysisProgress
                          isAnalyzing={true}
                          placeholderName={placeholder.name}
                        />
                      ) : hasGeneratedSql ? (
                        <div className="bg-black rounded p-2 max-h-32 overflow-y-auto">
                          <pre className="text-xs text-gray-100 font-mono whitespace-pre-wrap">
                            {typeof hasGeneratedSql === 'object' ?
                              hasGeneratedSql.sql || hasGeneratedSql[placeholder.name] :
                              hasGeneratedSql}
                          </pre>
                        </div>
                      ) : (
                        <div className="bg-gray-50 rounded p-2 text-center">
                          <p className="text-xs text-gray-400">Êú™ÁîüÊàê</p>
                        </div>
                      )}
                    </div>

                    {/* È™åËØÅÁªìÊûúÂå∫Âüü */}
                    <div>
                      <span className="text-xs text-gray-500 mb-1 block">È™åËØÅÁªìÊûú</span>

                      {isValidatingThis ? (
                        <InlineTestProgress
                          isTesting={true}
                          placeholderName={placeholder.name}
                        />
                      ) : testResult ? (
                        <div className={`p-2 rounded ${testResult.success ? 'bg-gray-50' : 'bg-gray-50'}`}>
                          {testResult.success ? (
                            <div className="space-y-2">
                              <div className="flex items-center justify-between">
                                <span className="text-xs text-gray-800 font-medium">
                                  ÊàêÂäü
                                </span>
                                <span className="text-xs text-gray-500">
                                  {testResult.execution_time_ms}ms
                                </span>
                              </div>

                              {/* Âë®ÊúüÊÄßÂç†‰ΩçÁ¨¶ */}
                              {testResult.result_type === 'period_value' ? (
                                <div className="bg-white border border-gray-200 rounded p-2 text-center">
                                  <div className="text-sm font-medium text-gray-900">
                                    {testResult.computed_value || testResult.data?.[0]?.[0] || '-'}
                                  </div>
                                  {testResult.period_info && (
                                    <div className="text-xs text-gray-500 mt-1">
                                      {testResult.period_info.start_date} ~ {testResult.period_info.end_date}
                                    </div>
                                  )}
                                </div>
                              ) : (
                                /* Â∏∏ËßÑSQLÁªìÊûú */
                                <div>
                                  <span className="text-xs text-gray-500">{testResult.row_count} Ë°å</span>
                                  {testResult.data && testResult.data.length > 0 && (
                                    <div className="mt-1 bg-white border border-gray-200 rounded overflow-hidden">
                                      <table className="w-full text-xs">
                                        <thead className="bg-gray-50">
                                          <tr>
                                            {testResult.columns?.slice(0, 3).map((col: string) => (
                                              <th key={col} className="px-2 py-1 text-left text-gray-600 font-normal">
                                                {col}
                                              </th>
                                            ))}
                                          </tr>
                                        </thead>
                                        <tbody>
                                          {testResult.data.slice(0, 2).map((row: any, i: number) => (
                                            <tr key={i} className="border-t border-gray-100">
                                              {Object.values(row).slice(0, 3).map((val: any, j: number) => (
                                                <td key={j} className="px-2 py-1 text-gray-700">
                                                  {String(val).substring(0, 15)}{String(val).length > 15 ? '...' : ''}
                                                </td>
                                              ))}
                                            </tr>
                                          ))}
                                        </tbody>
                                      </table>
                                    </div>
                                  )}
                                </div>
                              )}
                            </div>
                          ) : (
                            <div>
                              <span className="text-xs text-gray-800 font-medium">Â§±Ë¥•</span>
                              <p className="text-xs text-gray-600 mt-1 bg-gray-50 p-1 rounded">
                                {testResult.error}
                              </p>
                            </div>
                          )}
                        </div>
                      ) : (
                        <div className="bg-gray-50 rounded p-2 text-center">
                          <p className="text-xs text-gray-400">Êú™È™åËØÅ</p>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Âè≥‰∏äËßíÁºñËæëÊåâÈíÆ */}
                  <button
                    onClick={() => handleEditPlaceholder(placeholder)}
                    className="absolute top-3 right-3 text-gray-400 hover:text-gray-600"
                  >
                    <PencilIcon className="w-4 h-4" />
                  </button>
                </div>
              </Card>
            )
          })
        )}
      </div>

      {/* ÁºñËæëÂç†‰ΩçÁ¨¶Modal */}
      <Modal
        isOpen={editModalOpen}
        onClose={() => setEditModalOpen(false)}
        title="ÁºñËæëÂç†‰ΩçÁ¨¶ÈÖçÁΩÆ"
        size="lg"
      >
        <div className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Âç†‰ΩçÁ¨¶ÂêçÁß∞
              </label>
              <Input
                value={editForm.placeholder_name}
                onChange={(e) => setEditForm({...editForm, placeholder_name: e.target.value})}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Á±ªÂûã
              </label>
              <Select
                options={[
                  { label: 'ÁªüËÆ°', value: 'ÁªüËÆ°' },
                  { label: 'ÂõæË°®', value: 'ÂõæË°®' },
                  { label: 'ÊñáÊú¨', value: 'ÊñáÊú¨' },
                  { label: 'Êï∞ÊçÆ', value: 'Êï∞ÊçÆ' }
                ]}
                value={editForm.placeholder_type}
                onChange={(value) => setEditForm({...editForm, placeholder_type: value as string})}
              />
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                ÊâßË°åÈ°∫Â∫è
              </label>
              <Input
                type="number"
                value={editForm.execution_order}
                onChange={(e) => setEditForm({...editForm, execution_order: parseInt(e.target.value)})}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                ÁºìÂ≠òTTL (Â∞èÊó∂)
              </label>
              <Input
                type="number"
                value={editForm.cache_ttl_hours}
                onChange={(e) => setEditForm({...editForm, cache_ttl_hours: parseInt(e.target.value)})}
              />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              ÁîüÊàêÁöÑSQL
            </label>
            <Textarea
              value={editForm.generated_sql}
              onChange={(e) => setEditForm({...editForm, generated_sql: e.target.value})}
              rows={4}
              className="font-mono text-sm"
            />
          </div>

          <div className="flex items-center">
            <Switch
              checked={editForm.is_active}
              onChange={(checked) => setEditForm({...editForm, is_active: checked})}
            />
            <label className="ml-2 text-sm font-medium text-gray-700">
              ÂêØÁî®Ê≠§Âç†‰ΩçÁ¨¶
            </label>
          </div>
        </div>

        <div className="flex justify-end space-x-3 mt-6">
          <Button
            variant="outline"
            onClick={() => setEditModalOpen(false)}
          >
            ÂèñÊ∂à
          </Button>
          <Button onClick={handleSaveEdit}>
            ‰øùÂ≠òÊõ¥Êîπ
          </Button>
        </div>
      </Modal>
    </>
  )
}